
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package compiladoresfirstproject;

import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class myParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public myParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public myParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public myParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\005\004" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\004\000\002" +
    "\010\004\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\027\004\000" +
    "\002\030\004\000\002\026\004\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\033" +
    "\003\000\002\033\003\000\002\032\003\000\002\032\003" +
    "\000\002\015\003\000\002\015\003\000\002\017\003\000" +
    "\002\017\003\000\002\025\005\000\002\025\005\000\002" +
    "\025\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\022\005\000\002\022\003\000\002\023\005\000" +
    "\002\023\003\000\002\024\005\000\002\024\003\000\002" +
    "\024\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\021\003\000\002\021\005\000\002\011\010" +
    "\000\002\011\012\000\002\013\010\000\002\013\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\004\037\004\001\002\000\004\053\137\001" +
    "\002\000\016\006\ufffe\010\ufffe\011\ufffe\033\ufffe\034\ufffe" +
    "\037\ufffe\001\002\000\016\006\016\010\014\011\012\033" +
    "\024\034\021\037\004\001\002\000\004\002\010\001\002" +
    "\000\004\002\001\001\002\000\020\002\ufffb\006\ufffb\010" +
    "\ufffb\011\ufffb\033\ufffb\034\ufffb\046\ufffb\001\002\000\016" +
    "\006\016\010\014\011\012\033\024\034\021\045\106\001" +
    "\002\000\022\002\ufff9\006\ufff9\010\ufff9\011\ufff9\012\ufff9" +
    "\033\ufff9\034\ufff9\046\ufff9\001\002\000\004\043\127\001" +
    "\002\000\022\002\ufff8\006\ufff8\010\ufff8\011\ufff8\012\ufff8" +
    "\033\ufff8\034\ufff8\046\ufff8\001\002\000\004\043\056\001" +
    "\002\000\022\002\ufff7\006\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\033\ufff7\034\ufff7\046\ufff7\001\002\000\016\006\uffff\010" +
    "\uffff\011\uffff\033\uffff\034\uffff\037\uffff\001\002\000\014" +
    "\021\054\022\052\023\055\024\051\025\053\001\002\000" +
    "\016\002\000\006\016\010\014\011\012\033\024\034\021" +
    "\001\002\000\022\002\ufffa\006\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\033\ufffa\034\ufffa\046\ufffa\001\002\000\010\047\032" +
    "\050\027\051\030\001\002\000\022\002\uffef\006\uffef\010" +
    "\uffef\011\uffef\012\uffef\033\uffef\034\uffef\046\uffef\001\002" +
    "\000\022\002\uffed\006\uffed\010\uffed\011\uffed\012\uffed\033" +
    "\uffed\034\uffed\046\uffed\001\002\000\012\026\043\027\046" +
    "\030\042\031\044\001\002\000\006\026\040\030\037\001" +
    "\002\000\022\002\uffee\006\uffee\010\uffee\011\uffee\012\uffee" +
    "\033\uffee\034\uffee\046\uffee\001\002\000\006\027\036\031" +
    "\035\001\002\000\022\002\ufff6\006\ufff6\010\ufff6\011\ufff6" +
    "\012\ufff6\033\ufff6\034\ufff6\046\ufff6\001\002\000\022\002" +
    "\uffea\006\uffea\010\uffea\011\uffea\012\uffea\033\uffea\034\uffea" +
    "\046\uffea\001\002\000\022\002\uffe2\006\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\033\uffe2\034\uffe2\046\uffe2\001\002\000\022" +
    "\002\uffe3\006\uffe3\010\uffe3\011\uffe3\012\uffe3\033\uffe3\034" +
    "\uffe3\046\uffe3\001\002\000\022\002\uffe4\006\uffe4\010\uffe4" +
    "\011\uffe4\012\uffe4\033\uffe4\034\uffe4\046\uffe4\001\002\000" +
    "\022\002\uffe5\006\uffe5\010\uffe5\011\uffe5\012\uffe5\033\uffe5" +
    "\034\uffe5\046\uffe5\001\002\000\022\002\uffeb\006\uffeb\010" +
    "\uffeb\011\uffeb\012\uffeb\033\uffeb\034\uffeb\046\uffeb\001\002" +
    "\000\022\002\uffe7\006\uffe7\010\uffe7\011\uffe7\012\uffe7\033" +
    "\uffe7\034\uffe7\046\uffe7\001\002\000\022\002\uffe9\006\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\033\uffe9\034\uffe9\046\uffe9\001" +
    "\002\000\022\002\uffe6\006\uffe6\010\uffe6\011\uffe6\012\uffe6" +
    "\033\uffe6\034\uffe6\046\uffe6\001\002\000\022\002\uffec\006" +
    "\uffec\010\uffec\011\uffec\012\uffec\033\uffec\034\uffec\046\uffec" +
    "\001\002\000\022\002\uffe8\006\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\033\uffe8\034\uffe8\046\uffe8\001\002\000\020\002\ufffc" +
    "\006\ufffc\010\ufffc\011\ufffc\033\ufffc\034\ufffc\046\ufffc\001" +
    "\002\000\022\002\ufff5\006\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\033\ufff5\034\ufff5\046\ufff5\001\002\000\022\002\ufff1\006" +
    "\ufff1\010\ufff1\011\ufff1\012\ufff1\033\ufff1\034\ufff1\046\ufff1" +
    "\001\002\000\022\002\ufff3\006\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\033\ufff3\034\ufff3\046\ufff3\001\002\000\022\002\ufff0" +
    "\006\ufff0\010\ufff0\011\ufff0\012\ufff0\033\ufff0\034\ufff0\046" +
    "\ufff0\001\002\000\022\002\ufff4\006\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\033\ufff4\034\ufff4\046\ufff4\001\002\000\022\002" +
    "\ufff2\006\ufff2\010\ufff2\011\ufff2\012\ufff2\033\ufff2\034\ufff2" +
    "\046\ufff2\001\002\000\014\004\066\005\064\043\067\052" +
    "\061\053\063\001\002\000\044\002\uffdb\006\uffdb\010\uffdb" +
    "\011\uffdb\012\uffdb\013\121\014\123\015\120\016\125\017" +
    "\122\020\124\032\077\033\uffdb\034\uffdb\036\100\044\uffdb" +
    "\046\uffdb\001\002\000\050\002\uffd3\006\uffd3\010\uffd3\011" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\032\uffd3\033\uffd3\034\uffd3\036\uffd3\041\114\042" +
    "\113\044\uffd3\046\uffd3\001\002\000\050\002\uffce\006\uffce" +
    "\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016" +
    "\uffce\017\uffce\020\uffce\032\uffce\033\uffce\034\uffce\036\uffce" +
    "\041\uffce\042\uffce\044\uffce\046\uffce\001\002\000\004\044" +
    "\102\001\002\000\052\002\uffcf\006\uffcf\010\uffcf\011\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\036\uffcf\040\073\041\uffcf" +
    "\042\uffcf\044\uffcf\046\uffcf\001\002\000\004\044\uffcb\001" +
    "\002\000\050\002\uffd1\006\uffd1\010\uffd1\011\uffd1\012\uffd1" +
    "\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\036\uffd1\041\uffd1\042\uffd1\044\uffd1" +
    "\046\uffd1\001\002\000\004\044\uffcc\001\002\000\010\043" +
    "\067\052\061\053\063\001\002\000\004\044\uffcd\001\002" +
    "\000\004\044\072\001\002\000\050\002\uffd0\006\uffd0\010" +
    "\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0" +
    "\017\uffd0\020\uffd0\032\uffd0\033\uffd0\034\uffd0\036\uffd0\041" +
    "\uffd0\042\uffd0\044\uffd0\046\uffd0\001\002\000\010\043\067" +
    "\052\061\053\074\001\002\000\050\002\uffcf\006\uffcf\010" +
    "\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\032\uffcf\033\uffcf\034\uffcf\036\uffcf\041" +
    "\uffcf\042\uffcf\044\uffcf\046\uffcf\001\002\000\030\002\uffdd" +
    "\006\uffdd\010\uffdd\011\uffdd\012\uffdd\032\077\033\uffdd\034" +
    "\uffdd\036\100\044\uffdd\046\uffdd\001\002\000\010\043\067" +
    "\052\061\053\074\001\002\000\010\043\uffe0\052\uffe0\053" +
    "\uffe0\001\002\000\010\043\uffe1\052\uffe1\053\uffe1\001\002" +
    "\000\050\002\uffd4\006\uffd4\010\uffd4\011\uffd4\012\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\036\uffd4\041\uffd4\042\uffd4\044\uffd4\046" +
    "\uffd4\001\002\000\004\007\103\001\002\000\016\006\016" +
    "\010\014\011\012\033\024\034\021\045\106\001\002\000" +
    "\022\002\uffc8\006\uffc8\010\uffc8\011\uffc8\012\111\033\uffc8" +
    "\034\uffc8\046\uffc8\001\002\000\022\002\uffca\006\uffca\010" +
    "\uffca\011\uffca\012\uffca\033\uffca\034\uffca\046\uffca\001\002" +
    "\000\014\006\016\010\014\011\012\033\024\034\021\001" +
    "\002\000\016\006\016\010\014\011\012\033\024\034\021" +
    "\046\110\001\002\000\022\002\uffc9\006\uffc9\010\uffc9\011" +
    "\uffc9\012\uffc9\033\uffc9\034\uffc9\046\uffc9\001\002\000\016" +
    "\006\016\010\014\011\012\033\024\034\021\045\106\001" +
    "\002\000\022\002\uffc7\006\uffc7\010\uffc7\011\uffc7\012\uffc7" +
    "\033\uffc7\034\uffc7\046\uffc7\001\002\000\010\043\uffde\052" +
    "\uffde\053\uffde\001\002\000\010\043\uffdf\052\uffdf\053\uffdf" +
    "\001\002\000\010\043\067\052\061\053\074\001\002\000" +
    "\050\002\uffd2\006\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\032\077\033" +
    "\uffd2\034\uffd2\036\100\041\uffd2\042\uffd2\044\uffd2\046\uffd2" +
    "\001\002\000\010\043\067\052\061\053\074\001\002\000" +
    "\010\043\uffd8\052\uffd8\053\uffd8\001\002\000\010\043\uffda" +
    "\052\uffda\053\uffda\001\002\000\010\043\uffd6\052\uffd6\053" +
    "\uffd6\001\002\000\010\043\uffd9\052\uffd9\053\uffd9\001\002" +
    "\000\010\043\uffd5\052\uffd5\053\uffd5\001\002\000\010\043" +
    "\uffd7\052\uffd7\053\uffd7\001\002\000\030\002\uffdc\006\uffdc" +
    "\010\uffdc\011\uffdc\012\uffdc\032\077\033\uffdc\034\uffdc\036" +
    "\100\044\uffdc\046\uffdc\001\002\000\014\004\066\005\064" +
    "\043\067\052\061\053\063\001\002\000\004\044\131\001" +
    "\002\000\004\011\132\001\002\000\016\006\016\010\014" +
    "\011\012\033\024\034\021\045\106\001\002\000\022\002" +
    "\uffc6\006\uffc6\010\uffc6\011\uffc6\012\uffc6\033\uffc6\034\uffc6" +
    "\046\uffc6\001\002\000\004\010\135\001\002\000\010\043" +
    "\067\052\061\053\063\001\002\000\022\002\uffc5\006\uffc5" +
    "\010\uffc5\011\uffc5\012\uffc5\033\uffc5\034\uffc5\046\uffc5\001" +
    "\002\000\016\006\ufffd\010\ufffd\011\ufffd\033\ufffd\034\ufffd" +
    "\037\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\010\002\006\003\005\004\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\017\005\021" +
    "\006\010\007\022\010\012\011\014\013\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\104\007\022\010\012\011\014\013\016\021\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\047\001\001\000\014\006\046\007\022\010\012" +
    "\011\014\013\016\001\001\000\002\001\001\000\012\014" +
    "\032\026\025\027\024\030\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\044\001\001\000\004\033" +
    "\040\001\001\000\002\001\001\000\004\032\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\016\061\022\056\023\057\024\064\025\067\001\001\000" +
    "\006\015\075\020\116\001\001\000\004\017\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\022\056\023\057\024\064\025\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\022\074" +
    "\023\057\024\064\001\001\000\002\001\001\000\004\015" +
    "\075\001\001\000\004\024\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\104\007\022\010\012\011\014\013\016\021\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\106\006\010\007\022\010\012\011\014\013\016\001\001" +
    "\000\014\006\046\007\022\010\012\011\014\013\016\001" +
    "\001\000\002\001\001\000\016\006\104\007\022\010\012" +
    "\011\014\013\016\021\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\115\023\057" +
    "\024\064\001\001\000\004\015\075\001\001\000\010\022" +
    "\125\023\057\024\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\075\001\001\000\014" +
    "\016\127\022\056\023\057\024\064\025\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\104\007\022" +
    "\010\012\011\014\013\016\021\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\022\056\023\057\024\064" +
    "\025\135\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$myParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$myParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$myParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




 public void syntax_error(Symbol cur_token) {
                System.out.println("Error sintáctico: "+ cur_token.value);
                VentanaPrincipal.mostrarSalida("Error sintáctico: "+ cur_token.value);
}

public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
            System.out.println("Error sintáctico ya no se recupera");
            VentanaPrincipal.mostrarSalida("Error sintáctico ya no se recupera");
}
 public void semantics_error(String cur_token) {
                System.out.println("Error semantico: La variable  "+ cur_token + "  " + " No se encuentra");
                VentanaPrincipal.mostrarSalida("Error semantico: La variable  "+ cur_token + "  " + " No se encuentra");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$myParser$actions {


    Hashtable table = new Hashtable();
    TablaSim tablaSim=new TablaSim();

  private final myParser parser;

  /** Constructor */
  CUP$myParser$actions(myParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$myParser$do_action_part00000000(
    int                        CUP$myParser$act_num,
    java_cup.runtime.lr_parser CUP$myParser$parser,
    java.util.Stack            CUP$myParser$stack,
    int                        CUP$myParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$myParser$result;

      /* select the action based on the action number */
      switch (CUP$myParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		RESULT = start_val;
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$myParser$parser.done_parsing();
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= LISTAVARIABLES LISTADECLARACIONES 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTAVARIABLES ::= LISTAVARIABLES DECLARACIONVARIABLE 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTAVARIABLES",1, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTAVARIABLES ::= DECLARACIONVARIABLE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d;
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTAVARIABLES",1, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONVARIABLE ::= Declarar ID 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		
                        table.put(d.toString(),0);
                        RESULT= d;
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVARIABLE",2, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LISTADECLARACIONES ::= LISTADECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTADECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTADECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d;
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTADECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION ::= MOVER 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d;
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACION ::= VOZ 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d;
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION ::= DECLARACIONSELECCION 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d;
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION ::= DECLARACIONITERACION 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d;
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MOVER ::= Mover TIPO 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d;
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("MOVER",5, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VOZ ::= Decir PALABRA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d;
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("VOZ",6, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PALABRA ::= Hola 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PALABRA",8, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PALABRA ::= Adios 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PALABRA",8, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PALABRA ::= Lindos 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PALABRA",8, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PALABRA ::= Pura 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PALABRA",8, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PALABRA ::= Vida 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PALABRA",8, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO ::= OJOS 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO ::= CABEZA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO ::= BOCA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OJOS ::= Ojos DIRECCIONES 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OJOS",21, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CABEZA ::= Cabeza DIRECCIONHEAD 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("CABEZA",22, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BOCA ::= Boca DIRECCIONBOCA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("BOCA",20, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DIRECCIONES ::= Izquierda 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONES",23, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DIRECCIONES ::= Arriba 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONES",23, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DIRECCIONES ::= Derecha 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONES",23, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DIRECCIONES ::= Abajo 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONES",23, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DIRECCIONHEAD ::= Izquierda 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONHEAD",25, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DIRECCIONHEAD ::= Derecha 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONHEAD",25, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DIRECCIONBOCA ::= Arriba 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONBOCA",24, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DIRECCIONBOCA ::= Abajo 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONBOCA",24, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERADORSUMA ::= Suma 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORSUMA",11, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERADORSUMA ::= Resta 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORSUMA",11, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERADORMULT ::= Multi 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORMULT",13, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERADORMULT ::= Divi 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORMULT",13, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= ID Eq EXPRESIONSUMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		
                                            if(table.containsKey(id.toString())){
                                               table.replace(id.toString(), new Integer(((Integer)expr).intValue()));
                                               tablaSim.writeSymbol(id.toString(), new Integer(((Integer)expr).intValue()));
                                            }
                                           else{
                                            System.out.println("Variable no declarada");
                                            }                     
                                           
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= EXPRESIONSUMA OPERADORRELACIONAL EXPRESIONSUMA 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESIONSUMA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d;
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERADORRELACIONAL ::= Menor 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERADORRELACIONAL ::= Mayor 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERADORRELACIONAL ::= MenorEq 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERADORRELACIONAL ::= MayorEq 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERADORRELACIONAL ::= EqEq 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERADORRELACIONAL ::= Diferente 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d.toString();
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESIONSUMA ::= EXPRESIONSUMA OPERADORSUMA TERMINO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		if("+".equals(d.toString())){RESULT= new Integer(((Integer)n).intValue()+((Integer)m).intValue());}
                                                             else{RESULT= new Integer(((Integer)n).intValue()- ((Integer)m).intValue());}
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONSUMA",16, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESIONSUMA ::= EXPRESIONMULT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d;
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONSUMA",16, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESIONMULT ::= EXPRESIONMULT OPERADORMULT EXPRESIONSUMA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		if("/".equals(d.toString())){
                                                                 if((Integer)m==0){System.out.println("division entre cero");RESULT= new Integer(0);}
                                                                 else{RESULT=new Integer(((Integer)n).intValue()/((Integer)m).intValue());}}
                                                                 else{RESULT= new Integer(((Integer)n).intValue()*((Integer)m).intValue());}
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONMULT",17, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESIONMULT ::= TERMINO 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d;
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONMULT",17, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TERMINO ::= OpParenth EXPRESION CloseParenth 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		RESULT= d;
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TERMINO ::= ID 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		Integer value = (Integer) table.get(d);
            if(value==null){parser.semantics_error(d.toString());
                            value = new Integer (0);}
            RESULT= value;
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TERMINO ::= Num 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= new Integer(d);
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESIONCONDICION ::= EXPRESION 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d;
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCONDICION",12, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESIONCONDICION ::= True 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d;
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCONDICION",12, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESIONCONDICION ::= False 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d;
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCONDICION",12, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LISTADECLARACIONESCONDICIONADAS ::= DECLARACION 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		RESULT= d;
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTADECLARACIONESCONDICIONADAS",15, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LISTADECLARACIONESCONDICIONADAS ::= OpKey LISTADECLARACIONES CloseKey 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		RESULT= d;
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTADECLARACIONESCONDICIONADAS",15, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACIONSELECCION ::= Si OpParenth EXPRESIONCONDICION CloseParenth Entonces LISTADECLARACIONESCONDICIONADAS 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONSELECCION",7, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACIONSELECCION ::= Si OpParenth EXPRESIONCONDICION CloseParenth Entonces LISTADECLARACIONESCONDICIONADAS Sino LISTADECLARACIONESCONDICIONADAS 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONSELECCION",7, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-7)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACIONITERACION ::= Mientras OpParenth EXPRESIONCONDICION CloseParenth Haga LISTADECLARACIONESCONDICIONADAS 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONITERACION",9, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACIONITERACION ::= Haga LISTADECLARACIONESCONDICIONADAS Mientras EXPRESION 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONITERACION",9, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$myParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$myParser$do_action(
    int                        CUP$myParser$act_num,
    java_cup.runtime.lr_parser CUP$myParser$parser,
    java.util.Stack            CUP$myParser$stack,
    int                        CUP$myParser$top)
    throws java.lang.Exception
    {
              return CUP$myParser$do_action_part00000000(
                               CUP$myParser$act_num,
                               CUP$myParser$parser,
                               CUP$myParser$stack,
                               CUP$myParser$top);
    }
}

}
