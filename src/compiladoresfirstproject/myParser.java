
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package compiladoresfirstproject;

import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class myParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public myParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public myParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public myParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\005\000\002\034" +
    "\004\000\002\034\003\000\002\034\003\000\002\035\006" +
    "\000\002\003\004\000\002\003\003\000\002\003\003\000" +
    "\002\004\005\000\002\005\004\000\002\005\003\000\002" +
    "\005\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\007\005\000\002\010\004" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\027\004\000\002\030" +
    "\004\000\002\026\004\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\033\003\000" +
    "\002\033\003\000\002\032\003\000\002\032\003\000\002" +
    "\015\003\000\002\015\003\000\002\017\003\000\002\017" +
    "\003\000\002\025\005\000\002\025\005\000\002\025\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\022\005\000\002\022\003\000\002\023\005\000\002\023" +
    "\003\000\002\024\005\000\002\024\003\000\002\024\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\021\003\000\002\021\005\000\002\011\010\000\002" +
    "\011\012\000\002\013\010\000\002\013\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\006\003\005\037\004\001\002\000\004\054" +
    "\154\001\002\000\010\003\ufff9\037\ufff9\043\ufff9\001\002" +
    "\000\010\003\ufffa\037\ufffa\043\ufffa\001\002\000\010\003" +
    "\012\037\004\043\016\001\002\000\004\002\011\001\002" +
    "\000\004\002\001\001\002\000\020\003\ufffd\006\ufffd\010" +
    "\ufffd\011\ufffd\033\ufffd\034\ufffd\043\ufffd\001\002\000\010" +
    "\003\ufffb\037\ufffb\043\ufffb\001\002\000\020\003\031\006" +
    "\027\010\025\011\022\033\036\034\033\043\016\001\002" +
    "\000\020\003\ufffe\006\ufffe\010\ufffe\011\ufffe\033\ufffe\034" +
    "\ufffe\043\ufffe\001\002\000\004\054\017\001\002\000\004" +
    "\040\020\001\002\000\004\053\021\001\002\000\020\003" +
    "\ufffc\006\ufffc\010\ufffc\011\ufffc\033\ufffc\034\ufffc\043\ufffc" +
    "\001\002\000\016\006\027\010\025\011\022\033\036\034" +
    "\033\046\121\001\002\000\020\002\ufff6\006\ufff6\010\ufff6" +
    "\011\ufff6\033\ufff6\034\ufff6\047\ufff6\001\002\000\022\002" +
    "\ufff3\006\ufff3\010\ufff3\011\ufff3\012\ufff3\033\ufff3\034\ufff3" +
    "\047\ufff3\001\002\000\004\044\142\001\002\000\022\002" +
    "\ufff2\006\ufff2\010\ufff2\011\ufff2\012\ufff2\033\ufff2\034\ufff2" +
    "\047\ufff2\001\002\000\004\044\071\001\002\000\022\002" +
    "\ufff1\006\ufff1\010\ufff1\011\ufff1\012\ufff1\033\ufff1\034\ufff1" +
    "\047\ufff1\001\002\000\020\002\ufff5\006\ufff5\010\ufff5\011" +
    "\ufff5\033\ufff5\034\ufff5\047\ufff5\001\002\000\020\003\uffff" +
    "\006\uffff\010\uffff\011\uffff\033\uffff\034\uffff\043\uffff\001" +
    "\002\000\014\021\067\022\065\023\070\024\064\025\066" +
    "\001\002\000\016\002\000\006\027\010\025\011\022\033" +
    "\036\034\033\001\002\000\022\002\ufff4\006\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\033\ufff4\034\ufff4\047\ufff4\001\002\000" +
    "\010\050\044\051\041\052\043\001\002\000\004\035\uffe9" +
    "\001\002\000\004\035\uffe7\001\002\000\012\026\056\027" +
    "\061\030\055\031\057\001\002\000\004\035\uffe8\001\002" +
    "\000\006\026\053\030\052\001\002\000\006\027\051\031" +
    "\050\001\002\000\004\035\046\001\002\000\022\002\ufff0" +
    "\006\ufff0\010\ufff0\011\ufff0\012\ufff0\033\ufff0\034\ufff0\047" +
    "\ufff0\001\002\000\004\035\uffe4\001\002\000\004\035\uffdc" +
    "\001\002\000\004\035\uffdd\001\002\000\004\035\uffde\001" +
    "\002\000\004\035\uffdf\001\002\000\004\035\uffe5\001\002" +
    "\000\004\035\uffe1\001\002\000\004\035\uffe3\001\002\000" +
    "\004\035\uffe0\001\002\000\004\035\uffe6\001\002\000\004" +
    "\035\uffe2\001\002\000\020\002\ufff7\006\ufff7\010\ufff7\011" +
    "\ufff7\033\ufff7\034\ufff7\047\ufff7\001\002\000\022\002\uffef" +
    "\006\uffef\010\uffef\011\uffef\012\uffef\033\uffef\034\uffef\047" +
    "\uffef\001\002\000\022\002\uffeb\006\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\033\uffeb\034\uffeb\047\uffeb\001\002\000\022\002" +
    "\uffed\006\uffed\010\uffed\011\uffed\012\uffed\033\uffed\034\uffed" +
    "\047\uffed\001\002\000\022\002\uffea\006\uffea\010\uffea\011" +
    "\uffea\012\uffea\033\uffea\034\uffea\047\uffea\001\002\000\022" +
    "\002\uffee\006\uffee\010\uffee\011\uffee\012\uffee\033\uffee\034" +
    "\uffee\047\uffee\001\002\000\022\002\uffec\006\uffec\010\uffec" +
    "\011\uffec\012\uffec\033\uffec\034\uffec\047\uffec\001\002\000" +
    "\014\004\101\005\077\044\102\053\074\054\076\001\002" +
    "\000\024\013\134\014\136\015\133\016\140\017\135\020" +
    "\137\032\112\036\113\045\uffd5\001\002\000\030\013\uffcd" +
    "\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\032\uffcd\036" +
    "\uffcd\041\127\042\126\045\uffcd\001\002\000\030\013\uffc8" +
    "\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\032\uffc8\036" +
    "\uffc8\041\uffc8\042\uffc8\045\uffc8\001\002\000\004\045\115" +
    "\001\002\000\032\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\032\uffc9\036\uffc9\040\106\041\uffc9\042\uffc9" +
    "\045\uffc9\001\002\000\004\045\uffc5\001\002\000\030\013" +
    "\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\032\uffcb" +
    "\036\uffcb\041\uffcb\042\uffcb\045\uffcb\001\002\000\004\045" +
    "\uffc6\001\002\000\010\044\102\053\074\054\076\001\002" +
    "\000\004\045\uffc7\001\002\000\004\045\105\001\002\000" +
    "\030\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca" +
    "\032\uffca\036\uffca\041\uffca\042\uffca\045\uffca\001\002\000" +
    "\010\044\102\053\074\054\107\001\002\000\030\013\uffc9" +
    "\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\032\uffc9\036" +
    "\uffc9\041\uffc9\042\uffc9\045\uffc9\001\002\000\010\032\112" +
    "\036\113\045\uffd7\001\002\000\010\044\102\053\074\054" +
    "\107\001\002\000\010\044\uffda\053\uffda\054\uffda\001\002" +
    "\000\010\044\uffdb\053\uffdb\054\uffdb\001\002\000\030\013" +
    "\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\032\uffce" +
    "\036\uffce\041\uffce\042\uffce\045\uffce\001\002\000\004\007" +
    "\116\001\002\000\016\006\027\010\025\011\022\033\036" +
    "\034\033\046\121\001\002\000\022\002\uffc2\006\uffc2\010" +
    "\uffc2\011\uffc2\012\124\033\uffc2\034\uffc2\047\uffc2\001\002" +
    "\000\022\002\uffc4\006\uffc4\010\uffc4\011\uffc4\012\uffc4\033" +
    "\uffc4\034\uffc4\047\uffc4\001\002\000\016\003\031\006\027" +
    "\010\025\011\022\033\036\034\033\001\002\000\016\006" +
    "\027\010\025\011\022\033\036\034\033\047\123\001\002" +
    "\000\022\002\uffc3\006\uffc3\010\uffc3\011\uffc3\012\uffc3\033" +
    "\uffc3\034\uffc3\047\uffc3\001\002\000\016\006\027\010\025" +
    "\011\022\033\036\034\033\046\121\001\002\000\022\002" +
    "\uffc1\006\uffc1\010\uffc1\011\uffc1\012\uffc1\033\uffc1\034\uffc1" +
    "\047\uffc1\001\002\000\010\044\uffd8\053\uffd8\054\uffd8\001" +
    "\002\000\010\044\uffd9\053\uffd9\054\uffd9\001\002\000\010" +
    "\044\102\053\074\054\107\001\002\000\030\013\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\032\112\036\113" +
    "\041\uffcc\042\uffcc\045\uffcc\001\002\000\010\044\102\053" +
    "\074\054\107\001\002\000\010\044\uffd2\053\uffd2\054\uffd2" +
    "\001\002\000\010\044\uffd4\053\uffd4\054\uffd4\001\002\000" +
    "\010\044\uffd0\053\uffd0\054\uffd0\001\002\000\010\044\uffd3" +
    "\053\uffd3\054\uffd3\001\002\000\010\044\uffcf\053\uffcf\054" +
    "\uffcf\001\002\000\010\044\uffd1\053\uffd1\054\uffd1\001\002" +
    "\000\010\032\112\036\113\045\uffd6\001\002\000\014\004" +
    "\101\005\077\044\102\053\074\054\076\001\002\000\004" +
    "\045\144\001\002\000\004\011\145\001\002\000\016\006" +
    "\027\010\025\011\022\033\036\034\033\046\121\001\002" +
    "\000\022\002\uffc0\006\uffc0\010\uffc0\011\uffc0\012\uffc0\033" +
    "\uffc0\034\uffc0\047\uffc0\001\002\000\004\010\150\001\002" +
    "\000\004\044\151\001\002\000\010\044\102\053\074\054" +
    "\076\001\002\000\004\045\153\001\002\000\022\002\uffbf" +
    "\006\uffbf\010\uffbf\011\uffbf\012\uffbf\033\uffbf\034\uffbf\047" +
    "\uffbf\001\002\000\004\035\155\001\002\000\010\003\ufff8" +
    "\037\ufff8\043\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\010\002\007\003\006\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\012\034\013\035\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\005\033\006\022\007\034\010\023\011\025\013\027\035" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\117\007\034\010\023\011\025\013\027\021\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\062\001\001\000" +
    "\014\006\061\007\034\010\023\011\025\013\027\001\001" +
    "\000\002\001\001\000\012\014\044\026\037\027\036\030" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\057\001\001\000\002\001\001\000\004\033\053\001" +
    "\001\000\004\032\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\016\074" +
    "\022\071\023\072\024\077\025\102\001\001\000\006\015" +
    "\110\020\131\001\001\000\004\017\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\022\071" +
    "\023\072\024\077\025\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\107\023\072" +
    "\024\077\001\001\000\002\001\001\000\004\015\110\001" +
    "\001\000\004\024\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\117\007\034\010\023\011\025\013\027\021\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\005\121\006" +
    "\022\007\034\010\023\011\025\013\027\001\001\000\014" +
    "\006\061\007\034\010\023\011\025\013\027\001\001\000" +
    "\002\001\001\000\016\006\117\007\034\010\023\011\025" +
    "\013\027\021\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\130\023\072\024\077" +
    "\001\001\000\004\015\110\001\001\000\010\022\140\023" +
    "\072\024\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\110\001\001\000\014\016\142" +
    "\022\071\023\072\024\077\025\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\117\007\034\010\023" +
    "\011\025\013\027\021\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\022\071\023\072" +
    "\024\077\025\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$myParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$myParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$myParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




ArrayList<String> arraySyntax = new ArrayList<String>();
ArrayList<String> arraySemantic = new ArrayList<String>();

// protected int error_sync_size () {
//        System.out.println(":error_sync_size was called.");
//        return 4;}

 public void syntax_error(Symbol cur_token) {
                System.out.println("#Error sintactico con el token: " + cur_token.value);
                VentanaPrincipal.mostrarSalida("#Error sintactico con el token: " + cur_token.value);
                arraySyntax.add("Error sintactico con el token: " + cur_token.value);
                AnalizadorMain.canGenerateCode = false;
                report_error("Syntax Error", null);
}

public void unrecovered_syntax_error(Symbol cur_token) {
            System.out.println("#Error sintactico ya no se recupera");
            VentanaPrincipal.mostrarSalida("#Error sintactico ya no se recupera");
}

 public void semanticError(String pCurToken,String pMsg) {
                System.out.println("#Error semantico sobre el token: " + pCurToken + " " + pMsg);
                VentanaPrincipal.mostrarSalida("#Error semantico sobre el token: " + pCurToken + " " + pMsg);
                arraySemantic.add("Error semantico sobre el token: " + pCurToken + " " + pMsg);
                AnalizadorMain.canGenerateCode = false;
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$myParser$actions {


    Hashtable table = new Hashtable();
    TablaSim tablaSim=new TablaSim();
    Errores reportadorErr = new Errores();

  private final myParser parser;

  /** Constructor */
  CUP$myParser$actions(myParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$myParser$do_action_part00000000(
    int                        CUP$myParser$act_num,
    java_cup.runtime.lr_parser CUP$myParser$parser,
    java.util.Stack            CUP$myParser$stack,
    int                        CUP$myParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$myParser$result;

      /* select the action based on the action number */
      switch (CUP$myParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		RESULT = start_val;
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$myParser$parser.done_parsing();
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= LISTAVARIABLES ASIGNACIONES LISTADECLARACIONES 
            {
              Object RESULT =null;
		 reportadorErr.reportarErrores(arraySyntax,arraySemantic); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ASIGNACIONES ::= ASIGNACIONES ASIGNAR 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",26, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ASIGNACIONES ::= ASIGNAR 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",26, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ASIGNACIONES ::= error 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",26, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ASIGNAR ::= Asignar ID Eq Num 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT=id;
                            if(table.containsKey(id.toString())){
                                table.replace(id.toString(),new Integer(n));
                                tablaSim.writeSymbol(id.toString(), new Integer(n));
                            }
                            else{
                                System.out.println("VARIABLE NO DECLARADA");
                                parser.semanticError(id.toString(),"variable sin declarar");
                            }
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("ASIGNAR",27, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTAVARIABLES ::= LISTAVARIABLES DECLARACIONVARIABLE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTAVARIABLES",1, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTAVARIABLES ::= DECLARACIONVARIABLE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTAVARIABLES",1, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTAVARIABLES ::= error 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTAVARIABLES",1, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACIONVARIABLE ::= Declarar ID NewLine 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		
                        RESULT= id;
                        table.put(id.toString(),-1);
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVARIABLE",2, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTADECLARACIONES ::= LISTADECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTADECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTADECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTADECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTADECLARACIONES ::= error 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTADECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION ::= MOVER 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION ::= VOZ 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= DECLARACIONSELECCION 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= DECLARACIONITERACION 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MOVER ::= Mover TIPO NewLine 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("MOVER",5, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VOZ ::= Decir PALABRA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("VOZ",6, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PALABRA ::= Hola 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PALABRA",8, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PALABRA ::= Adios 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PALABRA",8, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PALABRA ::= Lindos 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PALABRA",8, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PALABRA ::= Pura 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PALABRA",8, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PALABRA ::= Vida 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PALABRA",8, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO ::= OJOS 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO ::= CABEZA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPO ::= BOCA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OJOS ::= Ojos DIRECCIONES 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OJOS",21, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CABEZA ::= Cabeza DIRECCIONHEAD 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("CABEZA",22, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BOCA ::= Boca DIRECCIONBOCA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("BOCA",20, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DIRECCIONES ::= Izquierda 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONES",23, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DIRECCIONES ::= Arriba 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONES",23, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DIRECCIONES ::= Derecha 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONES",23, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DIRECCIONES ::= Abajo 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONES",23, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DIRECCIONHEAD ::= Izquierda 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONHEAD",25, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DIRECCIONHEAD ::= Derecha 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONHEAD",25, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DIRECCIONBOCA ::= Arriba 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONBOCA",24, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DIRECCIONBOCA ::= Abajo 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONBOCA",24, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERADORSUMA ::= Suma 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORSUMA",11, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERADORSUMA ::= Resta 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORSUMA",11, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERADORMULT ::= Multi 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORMULT",13, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERADORMULT ::= Divi 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORMULT",13, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= ID Eq EXPRESIONSUMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 if(!table.containsKey(id.toString())){
                                                    System.out.println("Variable no declarada");
                                                    parser.semanticError(id.toString(),"variable sin declarar");
                                               } else {
                                                    if((Integer)table.get(id.toString())==-1){
                                                    System.out.println("Null_Exception");
                                                    parser.semanticError(id.toString(),"Null_Exception");
                                                }
                                                }
                                               
 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESIONSUMA OPERADORRELACIONAL EXPRESIONSUMA 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESIONSUMA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERADORRELACIONAL ::= Menor 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERADORRELACIONAL ::= Mayor 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERADORRELACIONAL ::= MenorEq 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERADORRELACIONAL ::= MayorEq 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERADORRELACIONAL ::= EqEq 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERADORRELACIONAL ::= Diferente 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESIONSUMA ::= EXPRESIONSUMA OPERADORSUMA TERMINO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 if("+".equals(d.toString())){RESULT= new Integer(((Integer)n).intValue()+((Integer)m).intValue());}
                                                              else{RESULT= new Integer(((Integer)n).intValue()- ((Integer)m).intValue());} 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONSUMA",16, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESIONSUMA ::= EXPRESIONMULT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONSUMA",16, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESIONMULT ::= EXPRESIONMULT OPERADORMULT EXPRESIONSUMA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		if("/".equals(d.toString())){
                                                                 if((Integer)m==0){System.out.println("division entre cero");
                                                                    parser.semanticError(m.toString(),"division entre cero"); RESULT= new Integer(0);}
                                                                 else{RESULT=new Integer(((Integer)n).intValue()/((Integer)m).intValue());}}
                                                                 else{RESULT= new Integer(((Integer)n).intValue()*((Integer)m).intValue());}
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONMULT",17, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESIONMULT ::= TERMINO 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONMULT",17, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TERMINO ::= OpParenth EXPRESION CloseParenth 
            {
              Object RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object OP = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		int CPleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int CPright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object CP = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TERMINO ::= ID 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 Integer value = (Integer) table.get(d);
            if(value==null){ parser.semanticError(d.toString(),"Null_Exception");
                            value = new Integer (0);}
            RESULT= value;
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TERMINO ::= Num 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= new Integer(d); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESIONCONDICION ::= EXPRESION 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCONDICION",12, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESIONCONDICION ::= True 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= cond; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCONDICION",12, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESIONCONDICION ::= False 
            {
              Object RESULT =null;
		int cond2left = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object cond2 = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= cond2; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCONDICION",12, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LISTADECLARACIONESCONDICIONADAS ::= DECLARACION 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTADECLARACIONESCONDICIONADAS",15, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LISTADECLARACIONESCONDICIONADAS ::= OpKey LISTADECLARACIONES CloseKey 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= list; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTADECLARACIONESCONDICIONADAS",15, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACIONSELECCION ::= Si OpParenth EXPRESIONCONDICION CloseParenth Entonces LISTADECLARACIONESCONDICIONADAS 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-5)).value;
		int LPleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-4)).left;
		int LPright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-4)).right;
		Object LP = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-3)).value;
		int RPleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int RPright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object RP = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object then = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= list; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONSELECCION",7, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACIONSELECCION ::= Si OpParenth EXPRESIONCONDICION CloseParenth Entonces LISTADECLARACIONESCONDICIONADAS Sino LISTADECLARACIONESCONDICIONADAS 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-7)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-7)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-7)).value;
		int LPleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-6)).left;
		int LPright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-6)).right;
		Object LP = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-6)).value;
		int RPleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-4)).left;
		int RPright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-4)).right;
		Object RP = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-4)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)).right;
		Object then = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object cond2 = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		int list2left = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int list2right = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object list2 = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONSELECCION",7, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-7)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACIONITERACION ::= Mientras OpParenth EXPRESIONCONDICION CloseParenth Haga LISTADECLARACIONESCONDICIONADAS 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-5)).value;
		int OPleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-4)).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-4)).right;
		Object OP = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-3)).value;
		int CPleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int CPright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object CP = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object cond2 = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONITERACION",9, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACIONITERACION ::= Haga LISTADECLARACIONESCONDICIONADAS Mientras OpParenth EXPRESION CloseParenth 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-4)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-4)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)).right;
		Object cond2 = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONITERACION",9, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$myParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$myParser$do_action(
    int                        CUP$myParser$act_num,
    java_cup.runtime.lr_parser CUP$myParser$parser,
    java.util.Stack            CUP$myParser$stack,
    int                        CUP$myParser$top)
    throws java.lang.Exception
    {
              return CUP$myParser$do_action_part00000000(
                               CUP$myParser$act_num,
                               CUP$myParser$parser,
                               CUP$myParser$stack,
                               CUP$myParser$top);
    }
}

}
