
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package compiladoresfirstproject;

import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class myParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public myParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public myParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public myParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\034\004\000\002\034\003\000\002\035\006" +
    "\000\002\003\004\000\002\003\003\000\002\003\003\000" +
    "\002\004\005\000\002\005\004\000\002\005\003\000\002" +
    "\005\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\007\005\000\002\010\004" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\027\004\000\002\030\004\000\002\026\004" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\015\003\000\002\015\003" +
    "\000\002\017\003\000\002\017\003\000\002\025\005\000" +
    "\002\025\005\000\002\025\003\000\002\025\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\022\005\000\002\022\003\000\002\023\005\000" +
    "\002\023\003\000\002\024\005\000\002\024\003\000\002" +
    "\024\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\021\003\000\002\021\005\000\002\011\010" +
    "\000\002\011\012\000\002\013\010\000\002\013\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\006\003\005\037\004\001\002\000\004\054" +
    "\162\001\002\000\010\002\uffff\037\ufff9\043\ufff9\001\002" +
    "\000\006\037\ufffa\043\ufffa\001\002\000\006\037\004\043" +
    "\015\001\002\000\004\002\011\001\002\000\004\002\001" +
    "\001\002\000\006\037\ufffb\043\ufffb\001\002\000\020\003" +
    "\030\006\026\010\024\011\021\033\035\034\032\043\015" +
    "\001\002\000\020\003\ufffd\006\ufffd\010\ufffd\011\ufffd\033" +
    "\ufffd\034\ufffd\043\ufffd\001\002\000\004\054\016\001\002" +
    "\000\004\040\017\001\002\000\004\053\020\001\002\000" +
    "\020\003\ufffc\006\ufffc\010\ufffc\011\ufffc\033\ufffc\034\ufffc" +
    "\043\ufffc\001\002\000\016\006\026\010\024\011\021\033" +
    "\035\034\032\046\126\001\002\000\020\002\ufff6\006\ufff6" +
    "\010\ufff6\011\ufff6\033\ufff6\034\ufff6\047\ufff6\001\002\000" +
    "\022\002\ufff3\006\ufff3\010\ufff3\011\ufff3\012\ufff3\033\ufff3" +
    "\034\ufff3\047\ufff3\001\002\000\004\044\150\001\002\000" +
    "\022\002\ufff2\006\ufff2\010\ufff2\011\ufff2\012\ufff2\033\ufff2" +
    "\034\ufff2\047\ufff2\001\002\000\004\044\075\001\002\000" +
    "\022\002\ufff1\006\ufff1\010\ufff1\011\ufff1\012\ufff1\033\ufff1" +
    "\034\ufff1\047\ufff1\001\002\000\020\002\ufff5\006\ufff5\010" +
    "\ufff5\011\ufff5\033\ufff5\034\ufff5\047\ufff5\001\002\000\020" +
    "\003\ufffe\006\ufffe\010\ufffe\011\ufffe\033\ufffe\034\ufffe\043" +
    "\ufffe\001\002\000\016\003\067\021\073\022\071\023\074" +
    "\024\070\025\072\001\002\000\016\002\000\006\026\010" +
    "\024\011\021\033\035\034\032\001\002\000\022\002\ufff4" +
    "\006\ufff4\010\ufff4\011\ufff4\012\ufff4\033\ufff4\034\ufff4\047" +
    "\ufff4\001\002\000\012\003\037\050\044\051\041\052\043" +
    "\001\002\000\004\035\uffe8\001\002\000\004\035\uffe5\001" +
    "\002\000\004\035\uffe6\001\002\000\014\003\060\026\061" +
    "\027\064\030\057\031\062\001\002\000\004\035\uffe7\001" +
    "\002\000\010\003\054\026\055\030\053\001\002\000\010" +
    "\003\050\027\052\031\051\001\002\000\004\035\046\001" +
    "\002\000\022\002\ufff0\006\ufff0\010\ufff0\011\ufff0\012\ufff0" +
    "\033\ufff0\034\ufff0\047\ufff0\001\002\000\004\035\uffe2\001" +
    "\002\000\004\035\uffd7\001\002\000\004\035\uffd8\001\002" +
    "\000\004\035\uffd9\001\002\000\004\035\uffdb\001\002\000" +
    "\004\035\uffda\001\002\000\004\035\uffdc\001\002\000\004" +
    "\035\uffe3\001\002\000\004\035\uffdf\001\002\000\004\035" +
    "\uffdd\001\002\000\004\035\uffe1\001\002\000\004\035\uffde" +
    "\001\002\000\004\035\uffe4\001\002\000\004\035\uffe0\001" +
    "\002\000\020\002\ufff7\006\ufff7\010\ufff7\011\ufff7\033\ufff7" +
    "\034\ufff7\047\ufff7\001\002\000\022\002\uffef\006\uffef\010" +
    "\uffef\011\uffef\012\uffef\033\uffef\034\uffef\047\uffef\001\002" +
    "\000\022\002\uffe9\006\uffe9\010\uffe9\011\uffe9\012\uffe9\033" +
    "\uffe9\034\uffe9\047\uffe9\001\002\000\022\002\uffeb\006\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\033\uffeb\034\uffeb\047\uffeb\001" +
    "\002\000\022\002\uffed\006\uffed\010\uffed\011\uffed\012\uffed" +
    "\033\uffed\034\uffed\047\uffed\001\002\000\022\002\uffea\006" +
    "\uffea\010\uffea\011\uffea\012\uffea\033\uffea\034\uffea\047\uffea" +
    "\001\002\000\022\002\uffee\006\uffee\010\uffee\011\uffee\012" +
    "\uffee\033\uffee\034\uffee\047\uffee\001\002\000\022\002\uffec" +
    "\006\uffec\010\uffec\011\uffec\012\uffec\033\uffec\034\uffec\047" +
    "\uffec\001\002\000\016\003\104\004\106\005\103\044\110" +
    "\053\100\054\102\001\002\000\026\003\143\013\141\014" +
    "\144\015\140\016\146\017\142\020\145\032\117\036\120" +
    "\045\uffd0\001\002\000\032\003\uffc6\013\uffc6\014\uffc6\015" +
    "\uffc6\016\uffc6\017\uffc6\020\uffc6\032\uffc6\036\uffc6\041\134" +
    "\042\133\045\uffc6\001\002\000\032\003\uffc1\013\uffc1\014" +
    "\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\032\uffc1\036\uffc1" +
    "\041\uffc1\042\uffc1\045\uffc1\001\002\000\004\045\122\001" +
    "\002\000\034\003\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2" +
    "\017\uffc2\020\uffc2\032\uffc2\036\uffc2\040\113\041\uffc2\042" +
    "\uffc2\045\uffc2\001\002\000\004\045\uffbe\001\002\000\004" +
    "\045\uffcf\001\002\000\032\003\uffc4\013\uffc4\014\uffc4\015" +
    "\uffc4\016\uffc4\017\uffc4\020\uffc4\032\uffc4\036\uffc4\041\uffc4" +
    "\042\uffc4\045\uffc4\001\002\000\004\045\uffbf\001\002\000" +
    "\004\045\uffc0\001\002\000\012\003\104\044\110\053\100" +
    "\054\102\001\002\000\004\045\112\001\002\000\032\003" +
    "\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3" +
    "\032\uffc3\036\uffc3\041\uffc3\042\uffc3\045\uffc3\001\002\000" +
    "\010\044\110\053\100\054\114\001\002\000\032\003\uffc2" +
    "\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\032" +
    "\uffc2\036\uffc2\041\uffc2\042\uffc2\045\uffc2\001\002\000\010" +
    "\032\117\036\120\045\uffd2\001\002\000\010\044\110\053" +
    "\100\054\114\001\002\000\010\044\uffd5\053\uffd5\054\uffd5" +
    "\001\002\000\010\044\uffd6\053\uffd6\054\uffd6\001\002\000" +
    "\032\003\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\020\uffc7\032\uffc7\036\uffc7\041\uffc7\042\uffc7\045\uffc7\001" +
    "\002\000\004\007\123\001\002\000\016\006\026\010\024" +
    "\011\021\033\035\034\032\046\126\001\002\000\022\002" +
    "\uffbb\006\uffbb\010\uffbb\011\uffbb\012\131\033\uffbb\034\uffbb" +
    "\047\uffbb\001\002\000\022\002\uffbd\006\uffbd\010\uffbd\011" +
    "\uffbd\012\uffbd\033\uffbd\034\uffbd\047\uffbd\001\002\000\016" +
    "\003\030\006\026\010\024\011\021\033\035\034\032\001" +
    "\002\000\016\006\026\010\024\011\021\033\035\034\032" +
    "\047\130\001\002\000\022\002\uffbc\006\uffbc\010\uffbc\011" +
    "\uffbc\012\uffbc\033\uffbc\034\uffbc\047\uffbc\001\002\000\016" +
    "\006\026\010\024\011\021\033\035\034\032\046\126\001" +
    "\002\000\022\002\uffba\006\uffba\010\uffba\011\uffba\012\uffba" +
    "\033\uffba\034\uffba\047\uffba\001\002\000\010\044\uffd3\053" +
    "\uffd3\054\uffd3\001\002\000\010\044\uffd4\053\uffd4\054\uffd4" +
    "\001\002\000\010\044\110\053\100\054\114\001\002\000" +
    "\032\003\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5" +
    "\020\uffc5\032\117\036\120\041\uffc5\042\uffc5\045\uffc5\001" +
    "\002\000\010\044\110\053\100\054\114\001\002\000\010" +
    "\044\uffcc\053\uffcc\054\uffcc\001\002\000\010\044\uffce\053" +
    "\uffce\054\uffce\001\002\000\010\044\uffca\053\uffca\054\uffca" +
    "\001\002\000\010\044\uffc8\053\uffc8\054\uffc8\001\002\000" +
    "\010\044\uffcd\053\uffcd\054\uffcd\001\002\000\010\044\uffc9" +
    "\053\uffc9\054\uffc9\001\002\000\010\044\uffcb\053\uffcb\054" +
    "\uffcb\001\002\000\010\032\117\036\120\045\uffd1\001\002" +
    "\000\016\003\104\004\106\005\103\044\110\053\100\054" +
    "\102\001\002\000\004\045\152\001\002\000\004\011\153" +
    "\001\002\000\016\006\026\010\024\011\021\033\035\034" +
    "\032\046\126\001\002\000\022\002\uffb9\006\uffb9\010\uffb9" +
    "\011\uffb9\012\uffb9\033\uffb9\034\uffb9\047\uffb9\001\002\000" +
    "\004\010\156\001\002\000\004\044\157\001\002\000\012" +
    "\003\104\044\110\053\100\054\102\001\002\000\004\045" +
    "\161\001\002\000\022\002\uffb8\006\uffb8\010\uffb8\011\uffb8" +
    "\012\uffb8\033\uffb8\034\uffb8\047\uffb8\001\002\000\004\035" +
    "\163\001\002\000\006\037\ufff8\043\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\010\002\007\003\006\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\011\034\012\035\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\032\006\021" +
    "\007\033\010\022\011\024\013\026\035\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\124\007\033\010" +
    "\022\011\024\013\026\021\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\065\001\001\000\014\006\064\007" +
    "\033\010\022\011\024\013\026\001\001\000\002\001\001" +
    "\000\012\014\044\026\037\027\035\030\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\062\001\001\000\002\001\001\000\004\033\055\001" +
    "\001\000\004\032\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\100\022\075\023\076\024\104\025\106\001\001" +
    "\000\006\015\115\020\136\001\001\000\004\017\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\022\075\023\076" +
    "\024\104\025\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\022\114\023\076\024\104\001\001\000\002" +
    "\001\001\000\004\015\115\001\001\000\004\024\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\124\007\033\010\022\011" +
    "\024\013\026\021\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\126\006\021\007\033\010\022\011" +
    "\024\013\026\001\001\000\014\006\064\007\033\010\022" +
    "\011\024\013\026\001\001\000\002\001\001\000\016\006" +
    "\124\007\033\010\022\011\024\013\026\021\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\022\135\023\076\024\104\001\001\000\004\015\115" +
    "\001\001\000\010\022\146\023\076\024\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\115\001\001\000\014\016\150\022\075" +
    "\023\076\024\104\025\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\124\007\033\010\022\011\024" +
    "\013\026\021\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\022\075\023\076\024\104" +
    "\025\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$myParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$myParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$myParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




ArrayList<String> arraySyntax;
ArrayList<String> arraySemantic;

 protected int error_sync_size () {
        System.out.println(":error_sync_size was called.");
        return 2;}

 public void syntax_error(Symbol cur_token) {
                System.out.println("Error sintáctico: "+ cur_token.value);
                //System.out.println("En la línea: " + Main.s.getLineNumber());
                VentanaPrincipal.mostrarSalida("Error sintáctico: "+ cur_token.value);
                arraySyntax.add("Error sintáctico en el token " + cur_token.value);
                report_error("Syntax Error", null);
}

//public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
//            System.out.println("Error sintáctico ya no se recupera");
//            VentanaPrincipal.mostrarSalida("Error sintáctico ya no se recupera");
//}

 public void semantics_error(String cur_token) {
                System.out.println("Error semantico: La variable  "+ cur_token + "  " + " No se encuentra");
                VentanaPrincipal.mostrarSalida("Error semantico: La variable  "+ cur_token + "  " + " No se encuentra");
                arraySemantic.add("Error semantico: La variable: " + cur_token + " no se encuentra");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$myParser$actions {


    Hashtable table = new Hashtable();
    TablaSim tablaSim=new TablaSim();
    Errores reportadorErr = new Errores();

  private final myParser parser;

  /** Constructor */
  CUP$myParser$actions(myParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$myParser$do_action_part00000000(
    int                        CUP$myParser$act_num,
    java_cup.runtime.lr_parser CUP$myParser$parser,
    java.util.Stack            CUP$myParser$stack,
    int                        CUP$myParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$myParser$result;

      /* select the action based on the action number */
      switch (CUP$myParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		RESULT = start_val;
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$myParser$parser.done_parsing();
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= LISTAVARIABLES ASIGNACIONES LISTADECLARACIONES 
            {
              Object RESULT =null;
		 reportadorErr.reportarErrores(arraySyntax,arraySemantic); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= error 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ASIGNACIONES ::= ASIGNACIONES ASIGNAR 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",26, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ASIGNACIONES ::= ASIGNAR 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",26, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ASIGNAR ::= Asignar ID Eq Num 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT=id;
                            if(table.containsKey(id.toString())){
                                table.replace(id.toString(),new Integer(n));
                                tablaSim.writeSymbol(id.toString(), new Integer(n));
                            }
                            else{
                                System.out.println("VARIABLE NO DEFINIDA");
                            }
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("ASIGNAR",27, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTAVARIABLES ::= LISTAVARIABLES DECLARACIONVARIABLE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTAVARIABLES",1, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTAVARIABLES ::= DECLARACIONVARIABLE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTAVARIABLES",1, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTAVARIABLES ::= error 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTAVARIABLES",1, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACIONVARIABLE ::= Declarar ID NewLine 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		
                        RESULT= id;
                        table.put(id.toString(),0);
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVARIABLE",2, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTADECLARACIONES ::= LISTADECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTADECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTADECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTADECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTADECLARACIONES ::= error 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTADECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION ::= MOVER 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION ::= VOZ 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= DECLARACIONSELECCION 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= DECLARACIONITERACION 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MOVER ::= Mover TIPO NewLine 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("MOVER",5, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VOZ ::= Decir PALABRA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("VOZ",6, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PALABRA ::= Hola 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PALABRA",8, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PALABRA ::= Adios 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PALABRA",8, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PALABRA ::= Lindos 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PALABRA",8, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PALABRA ::= Pura 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PALABRA",8, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PALABRA ::= Vida 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PALABRA",8, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PALABRA ::= error 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PALABRA",8, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO ::= OJOS 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPO ::= CABEZA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPO ::= BOCA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPO ::= error 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OJOS ::= Ojos DIRECCIONES 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OJOS",21, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CABEZA ::= Cabeza DIRECCIONHEAD 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("CABEZA",22, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BOCA ::= Boca DIRECCIONBOCA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("BOCA",20, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DIRECCIONES ::= Izquierda 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONES",23, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DIRECCIONES ::= Arriba 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONES",23, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DIRECCIONES ::= Derecha 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONES",23, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DIRECCIONES ::= Abajo 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONES",23, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DIRECCIONES ::= error 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONES",23, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DIRECCIONHEAD ::= Izquierda 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONHEAD",25, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DIRECCIONHEAD ::= Derecha 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONHEAD",25, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DIRECCIONHEAD ::= error 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONHEAD",25, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DIRECCIONBOCA ::= Arriba 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONBOCA",24, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DIRECCIONBOCA ::= Abajo 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONBOCA",24, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DIRECCIONBOCA ::= error 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONBOCA",24, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERADORSUMA ::= Suma 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORSUMA",11, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERADORSUMA ::= Resta 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORSUMA",11, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERADORMULT ::= Multi 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORMULT",13, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERADORMULT ::= Divi 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORMULT",13, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= ID Eq EXPRESIONSUMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 if(!table.containsKey(id.toString())){
                                                    System.out.println("Variable no declarada");
                                               } 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= EXPRESIONSUMA OPERADORRELACIONAL EXPRESIONSUMA 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= EXPRESIONSUMA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= error 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERADORRELACIONAL ::= Menor 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERADORRELACIONAL ::= Mayor 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERADORRELACIONAL ::= MenorEq 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERADORRELACIONAL ::= MayorEq 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERADORRELACIONAL ::= EqEq 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERADORRELACIONAL ::= Diferente 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERADORRELACIONAL ::= error 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESIONSUMA ::= EXPRESIONSUMA OPERADORSUMA TERMINO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 if("+".equals(d.toString())){RESULT= new Integer(((Integer)n).intValue()+((Integer)m).intValue());}
                                                              else{RESULT= new Integer(((Integer)n).intValue()- ((Integer)m).intValue());} 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONSUMA",16, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESIONSUMA ::= EXPRESIONMULT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONSUMA",16, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESIONMULT ::= EXPRESIONMULT OPERADORMULT EXPRESIONSUMA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		if("/".equals(d.toString())){
                                                                 if((Integer)m==0){System.out.println("division entre cero");RESULT= new Integer(0);}
                                                                 else{RESULT=new Integer(((Integer)n).intValue()/((Integer)m).intValue());}}
                                                                 else{RESULT= new Integer(((Integer)n).intValue()*((Integer)m).intValue());}
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONMULT",17, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESIONMULT ::= TERMINO 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONMULT",17, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TERMINO ::= OpParenth EXPRESION CloseParenth 
            {
              Object RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object OP = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		int CPleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int CPright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object CP = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TERMINO ::= ID 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 Integer value = (Integer) table.get(d);
            if(value==null){parser.semantics_error(d.toString());
                            value = new Integer (0);}
            RESULT= value;
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TERMINO ::= Num 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= new Integer(d); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESIONCONDICION ::= EXPRESION 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCONDICION",12, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESIONCONDICION ::= True 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= cond; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCONDICION",12, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESIONCONDICION ::= False 
            {
              Object RESULT =null;
		int cond2left = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object cond2 = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= cond2; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCONDICION",12, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LISTADECLARACIONESCONDICIONADAS ::= DECLARACION 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTADECLARACIONESCONDICIONADAS",15, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LISTADECLARACIONESCONDICIONADAS ::= OpKey LISTADECLARACIONES CloseKey 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= list; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTADECLARACIONESCONDICIONADAS",15, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACIONSELECCION ::= Si OpParenth EXPRESIONCONDICION CloseParenth Entonces LISTADECLARACIONESCONDICIONADAS 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-5)).value;
		int LPleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-4)).left;
		int LPright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-4)).right;
		Object LP = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-3)).value;
		int RPleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int RPright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object RP = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object then = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= list; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONSELECCION",7, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACIONSELECCION ::= Si OpParenth EXPRESIONCONDICION CloseParenth Entonces LISTADECLARACIONESCONDICIONADAS Sino LISTADECLARACIONESCONDICIONADAS 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-7)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-7)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-7)).value;
		int LPleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-6)).left;
		int LPright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-6)).right;
		Object LP = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-6)).value;
		int RPleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-4)).left;
		int RPright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-4)).right;
		Object RP = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-4)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)).right;
		Object then = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object cond2 = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		int list2left = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int list2right = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object list2 = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONSELECCION",7, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-7)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACIONITERACION ::= Mientras OpParenth EXPRESIONCONDICION CloseParenth Haga LISTADECLARACIONESCONDICIONADAS 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-5)).value;
		int OPleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-4)).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-4)).right;
		Object OP = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-3)).value;
		int CPleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int CPright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object CP = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object cond2 = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONITERACION",9, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACIONITERACION ::= Haga LISTADECLARACIONESCONDICIONADAS Mientras OpParenth EXPRESION CloseParenth 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-4)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-4)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)).right;
		Object cond2 = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONITERACION",9, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$myParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$myParser$do_action(
    int                        CUP$myParser$act_num,
    java_cup.runtime.lr_parser CUP$myParser$parser,
    java.util.Stack            CUP$myParser$stack,
    int                        CUP$myParser$top)
    throws java.lang.Exception
    {
              return CUP$myParser$do_action_part00000000(
                               CUP$myParser$act_num,
                               CUP$myParser$parser,
                               CUP$myParser$stack,
                               CUP$myParser$top);
    }
}

}
