
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package compiladoresfirstproject;

import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class myParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public myParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public myParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public myParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\034\004\000\002\034\003\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\035\006\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\004\005\000\002\005" +
    "\004\000\002\005\003\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\005\000\002\010\004\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\027\004\000\002\030\004\000\002\026\004\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\015\003\000\002\015\003\000\002\017" +
    "\003\000\002\017\003\000\002\025\005\000\002\025\005" +
    "\000\002\025\003\000\002\025\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\022" +
    "\005\000\002\022\003\000\002\023\005\000\002\023\003" +
    "\000\002\024\005\000\002\024\003\000\002\024\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\021\003\000\002\021\005\000\002\011\010\000\002\011" +
    "\012\000\002\013\010\000\002\013\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\006\003\005\037\004\001\002\000\004\054" +
    "\176\001\002\000\006\002\uffff\043\175\001\002\000\010" +
    "\003\ufff5\037\ufff5\043\ufff5\001\002\000\010\003\012\037" +
    "\004\043\016\001\002\000\004\002\011\001\002\000\004" +
    "\002\001\001\002\000\014\006\172\010\171\011\174\033" +
    "\173\034\170\001\002\000\020\003\031\006\027\010\025" +
    "\011\023\033\036\034\033\043\016\001\002\000\010\003" +
    "\ufff6\037\ufff6\043\ufff6\001\002\000\020\003\ufffd\006\ufffd" +
    "\010\ufffd\011\ufffd\033\ufffd\034\ufffd\043\ufffd\001\002\000" +
    "\004\054\017\001\002\000\004\040\020\001\002\000\004" +
    "\053\021\001\002\000\020\003\ufff7\006\ufff7\010\ufff7\011" +
    "\ufff7\033\ufff7\034\ufff7\043\ufff7\001\002\000\020\002\ufff1" +
    "\006\ufff1\010\ufff1\011\ufff1\033\ufff1\034\ufff1\047\ufff1\001" +
    "\002\000\016\006\027\010\025\011\023\033\036\034\033" +
    "\046\134\001\002\000\022\002\uffea\006\uffea\010\uffea\011" +
    "\uffea\012\uffea\033\uffea\034\uffea\047\uffea\001\002\000\004" +
    "\044\156\001\002\000\022\002\uffe9\006\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\033\uffe9\034\uffe9\047\uffe9\001\002\000\004" +
    "\044\103\001\002\000\022\002\uffe8\006\uffe8\010\uffe8\011" +
    "\uffe8\012\uffe8\033\uffe8\034\uffe8\047\uffe8\001\002\000\014" +
    "\006\100\010\077\011\102\033\101\034\076\001\002\000" +
    "\020\003\ufffe\006\ufffe\010\ufffe\011\ufffe\033\ufffe\034\ufffe" +
    "\043\ufffe\001\002\000\016\003\067\021\074\022\072\023" +
    "\075\024\071\025\073\001\002\000\016\002\000\006\027" +
    "\010\025\011\023\033\036\034\033\001\002\000\022\002" +
    "\uffeb\006\uffeb\010\uffeb\011\uffeb\012\uffeb\033\uffeb\034\uffeb" +
    "\047\uffeb\001\002\000\012\003\040\050\045\051\042\052" +
    "\043\001\002\000\004\035\uffdf\001\002\000\004\035\uffdc" +
    "\001\002\000\004\035\uffdd\001\002\000\014\003\061\026" +
    "\062\027\065\030\060\031\063\001\002\000\010\003\055" +
    "\026\056\030\054\001\002\000\004\035\uffde\001\002\000" +
    "\010\003\051\027\053\031\052\001\002\000\004\035\047" +
    "\001\002\000\022\002\uffe7\006\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\033\uffe7\034\uffe7\047\uffe7\001\002\000\004\035\uffd9" +
    "\001\002\000\004\035\uffce\001\002\000\004\035\uffcf\001" +
    "\002\000\004\035\uffd0\001\002\000\004\035\uffd2\001\002" +
    "\000\004\035\uffd1\001\002\000\004\035\uffd3\001\002\000" +
    "\004\035\uffda\001\002\000\004\035\uffd6\001\002\000\004" +
    "\035\uffd4\001\002\000\004\035\uffd8\001\002\000\004\035" +
    "\uffd5\001\002\000\004\035\uffdb\001\002\000\004\035\uffd7" +
    "\001\002\000\020\002\ufff2\006\ufff2\010\ufff2\011\ufff2\033" +
    "\ufff2\034\ufff2\047\ufff2\001\002\000\022\002\uffe0\006\uffe0" +
    "\010\uffe0\011\uffe0\012\uffe0\033\uffe0\034\uffe0\047\uffe0\001" +
    "\002\000\022\002\uffe6\006\uffe6\010\uffe6\011\uffe6\012\uffe6" +
    "\033\uffe6\034\uffe6\047\uffe6\001\002\000\022\002\uffe2\006" +
    "\uffe2\010\uffe2\011\uffe2\012\uffe2\033\uffe2\034\uffe2\047\uffe2" +
    "\001\002\000\022\002\uffe4\006\uffe4\010\uffe4\011\uffe4\012" +
    "\uffe4\033\uffe4\034\uffe4\047\uffe4\001\002\000\022\002\uffe1" +
    "\006\uffe1\010\uffe1\011\uffe1\012\uffe1\033\uffe1\034\uffe1\047" +
    "\uffe1\001\002\000\022\002\uffe5\006\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\033\uffe5\034\uffe5\047\uffe5\001\002\000\022\002" +
    "\uffe3\006\uffe3\010\uffe3\011\uffe3\012\uffe3\033\uffe3\034\uffe3" +
    "\047\uffe3\001\002\000\020\002\uffef\006\uffef\010\uffef\011" +
    "\uffef\033\uffef\034\uffef\047\uffef\001\002\000\020\002\uffec" +
    "\006\uffec\010\uffec\011\uffec\033\uffec\034\uffec\047\uffec\001" +
    "\002\000\020\002\uffee\006\uffee\010\uffee\011\uffee\033\uffee" +
    "\034\uffee\047\uffee\001\002\000\020\002\ufff0\006\ufff0\010" +
    "\ufff0\011\ufff0\033\ufff0\034\ufff0\047\ufff0\001\002\000\020" +
    "\002\uffed\006\uffed\010\uffed\011\uffed\033\uffed\034\uffed\047" +
    "\uffed\001\002\000\016\003\111\004\114\005\112\044\116" +
    "\053\106\054\110\001\002\000\026\003\151\013\147\014" +
    "\152\015\146\016\154\017\150\020\153\032\125\036\126" +
    "\045\uffc7\001\002\000\032\003\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\020\uffbd\032\uffbd\036\uffbd\041\142" +
    "\042\141\045\uffbd\001\002\000\032\003\uffb8\013\uffb8\014" +
    "\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\032\uffb8\036\uffb8" +
    "\041\uffb8\042\uffb8\045\uffb8\001\002\000\004\045\130\001" +
    "\002\000\034\003\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\020\uffb9\032\uffb9\036\uffb9\040\121\041\uffb9\042" +
    "\uffb9\045\uffb9\001\002\000\004\045\uffc6\001\002\000\004" +
    "\045\uffb5\001\002\000\032\003\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\016\uffbb\017\uffbb\020\uffbb\032\uffbb\036\uffbb\041\uffbb" +
    "\042\uffbb\045\uffbb\001\002\000\004\045\uffb6\001\002\000" +
    "\004\045\uffb7\001\002\000\012\003\111\044\116\053\106" +
    "\054\110\001\002\000\004\045\120\001\002\000\032\003" +
    "\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba" +
    "\032\uffba\036\uffba\041\uffba\042\uffba\045\uffba\001\002\000" +
    "\010\044\116\053\106\054\122\001\002\000\032\003\uffb9" +
    "\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\032" +
    "\uffb9\036\uffb9\041\uffb9\042\uffb9\045\uffb9\001\002\000\010" +
    "\032\125\036\126\045\uffc9\001\002\000\010\044\116\053" +
    "\106\054\122\001\002\000\010\044\uffcc\053\uffcc\054\uffcc" +
    "\001\002\000\010\044\uffcd\053\uffcd\054\uffcd\001\002\000" +
    "\032\003\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe" +
    "\020\uffbe\032\uffbe\036\uffbe\041\uffbe\042\uffbe\045\uffbe\001" +
    "\002\000\004\007\131\001\002\000\016\006\027\010\025" +
    "\011\023\033\036\034\033\046\134\001\002\000\022\002" +
    "\uffb2\006\uffb2\010\uffb2\011\uffb2\012\137\033\uffb2\034\uffb2" +
    "\047\uffb2\001\002\000\022\002\uffb4\006\uffb4\010\uffb4\011" +
    "\uffb4\012\uffb4\033\uffb4\034\uffb4\047\uffb4\001\002\000\016" +
    "\003\031\006\027\010\025\011\023\033\036\034\033\001" +
    "\002\000\016\006\027\010\025\011\023\033\036\034\033" +
    "\047\136\001\002\000\022\002\uffb3\006\uffb3\010\uffb3\011" +
    "\uffb3\012\uffb3\033\uffb3\034\uffb3\047\uffb3\001\002\000\016" +
    "\006\027\010\025\011\023\033\036\034\033\046\134\001" +
    "\002\000\022\002\uffb1\006\uffb1\010\uffb1\011\uffb1\012\uffb1" +
    "\033\uffb1\034\uffb1\047\uffb1\001\002\000\010\044\uffca\053" +
    "\uffca\054\uffca\001\002\000\010\044\uffcb\053\uffcb\054\uffcb" +
    "\001\002\000\010\044\116\053\106\054\122\001\002\000" +
    "\032\003\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc" +
    "\020\uffbc\032\125\036\126\041\uffbc\042\uffbc\045\uffbc\001" +
    "\002\000\010\044\116\053\106\054\122\001\002\000\010" +
    "\044\uffc3\053\uffc3\054\uffc3\001\002\000\010\044\uffc5\053" +
    "\uffc5\054\uffc5\001\002\000\010\044\uffc1\053\uffc1\054\uffc1" +
    "\001\002\000\010\044\uffbf\053\uffbf\054\uffbf\001\002\000" +
    "\010\044\uffc4\053\uffc4\054\uffc4\001\002\000\010\044\uffc0" +
    "\053\uffc0\054\uffc0\001\002\000\010\044\uffc2\053\uffc2\054" +
    "\uffc2\001\002\000\010\032\125\036\126\045\uffc8\001\002" +
    "\000\016\003\111\004\114\005\112\044\116\053\106\054" +
    "\110\001\002\000\004\045\160\001\002\000\004\011\161" +
    "\001\002\000\016\006\027\010\025\011\023\033\036\034" +
    "\033\046\134\001\002\000\022\002\uffb0\006\uffb0\010\uffb0" +
    "\011\uffb0\012\uffb0\033\uffb0\034\uffb0\047\uffb0\001\002\000" +
    "\004\010\164\001\002\000\004\044\165\001\002\000\012" +
    "\003\111\044\116\053\106\054\110\001\002\000\004\045" +
    "\167\001\002\000\022\002\uffaf\006\uffaf\010\uffaf\011\uffaf" +
    "\012\uffaf\033\uffaf\034\uffaf\047\uffaf\001\002\000\020\003" +
    "\ufffb\006\ufffb\010\ufffb\011\ufffb\033\ufffb\034\ufffb\043\ufffb" +
    "\001\002\000\020\003\ufff8\006\ufff8\010\ufff8\011\ufff8\033" +
    "\ufff8\034\ufff8\043\ufff8\001\002\000\020\003\ufffa\006\ufffa" +
    "\010\ufffa\011\ufffa\033\ufffa\034\ufffa\043\ufffa\001\002\000" +
    "\020\003\ufffc\006\ufffc\010\ufffc\011\ufffc\033\ufffc\034\ufffc" +
    "\043\ufffc\001\002\000\020\003\ufff9\006\ufff9\010\ufff9\011" +
    "\ufff9\033\ufff9\034\ufff9\043\ufff9\001\002\000\010\003\ufff4" +
    "\037\ufff4\043\ufff4\001\002\000\004\035\177\001\002\000" +
    "\010\003\ufff3\037\ufff3\043\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\010\002\007\003\006\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\013\034\012\035\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\033\006\021" +
    "\007\034\010\023\011\025\013\027\035\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\132\007\034\010\023\011\025\013\027" +
    "\021\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\067\001\001\000" +
    "\014\006\065\007\034\010\023\011\025\013\027\001\001" +
    "\000\002\001\001\000\012\014\045\026\040\027\036\030" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\063\001\001\000\004\033\056\001" +
    "\001\000\002\001\001\000\004\032\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\106\022\103\023\104\024\112\025\114\001\001\000\006" +
    "\015\123\020\144\001\001\000\004\017\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\022\103\023\104\024\112" +
    "\025\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\022\122\023\104\024\112\001\001\000\002\001\001" +
    "\000\004\015\123\001\001\000\004\024\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\132\007\034\010\023\011\025\013" +
    "\027\021\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\134\006\021\007\034\010\023\011\025\013" +
    "\027\001\001\000\014\006\065\007\034\010\023\011\025" +
    "\013\027\001\001\000\002\001\001\000\016\006\132\007" +
    "\034\010\023\011\025\013\027\021\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\143\023\104\024\112\001\001\000\004\015\123\001\001" +
    "\000\010\022\154\023\104\024\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\123\001\001\000\014\016\156\022\103\023\104" +
    "\024\112\025\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\132\007\034\010\023\011\025\013\027" +
    "\021\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\022\103\023\104\024\112\025\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$myParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$myParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$myParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




ArrayList<String> arraySyntax = new ArrayList<String>();
ArrayList<String> arraySemantic = new ArrayList<String>();

 protected int error_sync_size () {
        System.out.println(":error_sync_size was called.");
        return 2;}

 public void syntax_error(Symbol cur_token) {
                System.out.println("Error sintáctico: "+ cur_token.value);
                //System.out.println("En la línea: " + Main.s.getLineNumber());
                VentanaPrincipal.mostrarSalida("Error sintáctico en el token: "+ cur_token.value);
                arraySyntax.add("Error sintáctico en el token: " + cur_token.value);
                AnalizadorMain.canGenerateCode = false;
                report_error("Syntax Error", null);
}

//public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
//            System.out.println("Error sintáctico ya no se recupera");
//            VentanaPrincipal.mostrarSalida("Error sintáctico ya no se recupera");
//}

 public void semanticError(String pCurToken,String pMsg) {
                System.out.println("Error semantico sobre el token: " + pCurToken + " " + pMsg);
                VentanaPrincipal.mostrarSalida("Error semantico sobre el token: " + pCurToken + " " + pMsg);
                arraySemantic.add("Error semantico sobre el token: " + pCurToken + " " + pMsg);
                AnalizadorMain.canGenerateCode = false;
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$myParser$actions {


    Hashtable table = new Hashtable();
    TablaSim tablaSim=new TablaSim();
    Errores reportadorErr = new Errores();

  private final myParser parser;

  /** Constructor */
  CUP$myParser$actions(myParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$myParser$do_action_part00000000(
    int                        CUP$myParser$act_num,
    java_cup.runtime.lr_parser CUP$myParser$parser,
    java.util.Stack            CUP$myParser$stack,
    int                        CUP$myParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$myParser$result;

      /* select the action based on the action number */
      switch (CUP$myParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		RESULT = start_val;
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$myParser$parser.done_parsing();
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= LISTAVARIABLES ASIGNACIONES LISTADECLARACIONES 
            {
              Object RESULT =null;
		 reportadorErr.reportarErrores(arraySyntax,arraySemantic); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= error 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ASIGNACIONES ::= ASIGNACIONES ASIGNAR 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",26, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ASIGNACIONES ::= ASIGNAR 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",26, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ASIGNACIONES ::= error Mover 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",26, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ASIGNACIONES ::= error Decir 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",26, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ASIGNACIONES ::= error Si 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",26, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ASIGNACIONES ::= error Haga 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",26, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ASIGNACIONES ::= error Mientras 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",26, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ASIGNAR ::= Asignar ID Eq Num 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT=id;
                            if(table.containsKey(id.toString())){
                                table.replace(id.toString(),new Integer(n));
                                tablaSim.writeSymbol(id.toString(), new Integer(n));
                            }
                            else{
                                System.out.println("VARIABLE NO DEFINIDA");
                                parser.semanticError(id.toString(),"variable sin definir");
                            }
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("ASIGNAR",27, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTAVARIABLES ::= LISTAVARIABLES DECLARACIONVARIABLE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTAVARIABLES",1, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTAVARIABLES ::= DECLARACIONVARIABLE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTAVARIABLES",1, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTAVARIABLES ::= error Asignar 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTAVARIABLES",1, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACIONVARIABLE ::= Declarar ID NewLine 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		
                        RESULT= id;
                        table.put(id.toString(),0);
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVARIABLE",2, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTADECLARACIONES ::= LISTADECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTADECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTADECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTADECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTADECLARACIONES ::= error Mover 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTADECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTADECLARACIONES ::= error Decir 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTADECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTADECLARACIONES ::= error Si 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTADECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTADECLARACIONES ::= error Haga 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTADECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTADECLARACIONES ::= error Mientras 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTADECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= MOVER 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= VOZ 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= DECLARACIONSELECCION 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= DECLARACIONITERACION 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MOVER ::= Mover TIPO NewLine 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("MOVER",5, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VOZ ::= Decir PALABRA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("VOZ",6, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PALABRA ::= Hola 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PALABRA",8, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PALABRA ::= Adios 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PALABRA",8, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PALABRA ::= Lindos 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PALABRA",8, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PALABRA ::= Pura 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PALABRA",8, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PALABRA ::= Vida 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PALABRA",8, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PALABRA ::= error 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("PALABRA",8, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPO ::= OJOS 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO ::= CABEZA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO ::= BOCA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO ::= error 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OJOS ::= Ojos DIRECCIONES 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OJOS",21, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CABEZA ::= Cabeza DIRECCIONHEAD 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("CABEZA",22, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BOCA ::= Boca DIRECCIONBOCA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("BOCA",20, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DIRECCIONES ::= Izquierda 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONES",23, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DIRECCIONES ::= Arriba 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONES",23, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DIRECCIONES ::= Derecha 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONES",23, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DIRECCIONES ::= Abajo 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONES",23, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DIRECCIONES ::= error 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONES",23, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DIRECCIONHEAD ::= Izquierda 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONHEAD",25, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DIRECCIONHEAD ::= Derecha 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONHEAD",25, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DIRECCIONHEAD ::= error 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONHEAD",25, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DIRECCIONBOCA ::= Arriba 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONBOCA",24, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DIRECCIONBOCA ::= Abajo 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONBOCA",24, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DIRECCIONBOCA ::= error 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DIRECCIONBOCA",24, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERADORSUMA ::= Suma 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORSUMA",11, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERADORSUMA ::= Resta 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORSUMA",11, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERADORMULT ::= Multi 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORMULT",13, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERADORMULT ::= Divi 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORMULT",13, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= ID Eq EXPRESIONSUMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 if(!table.containsKey(id.toString())){
                                                    System.out.println("Variable no declarada");
                                                    parser.semanticError(id.toString(),"variable sin declarar");
                                               } 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= EXPRESIONSUMA OPERADORRELACIONAL EXPRESIONSUMA 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= EXPRESIONSUMA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= error 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERADORRELACIONAL ::= Menor 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERADORRELACIONAL ::= Mayor 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERADORRELACIONAL ::= MenorEq 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERADORRELACIONAL ::= MayorEq 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERADORRELACIONAL ::= EqEq 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERADORRELACIONAL ::= Diferente 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d.toString(); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERADORRELACIONAL ::= error 
            {
              Object RESULT =null;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESIONSUMA ::= EXPRESIONSUMA OPERADORSUMA TERMINO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 if("+".equals(d.toString())){RESULT= new Integer(((Integer)n).intValue()+((Integer)m).intValue());}
                                                              else{RESULT= new Integer(((Integer)n).intValue()- ((Integer)m).intValue());} 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONSUMA",16, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESIONSUMA ::= EXPRESIONMULT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONSUMA",16, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESIONMULT ::= EXPRESIONMULT OPERADORMULT EXPRESIONSUMA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		if("/".equals(d.toString())){
                                                                 if((Integer)m==0){System.out.println("division entre cero");
                                                                    parser.semanticError(m.toString(),"division entre cero"); RESULT= new Integer(0);}
                                                                 else{RESULT=new Integer(((Integer)n).intValue()/((Integer)m).intValue());}}
                                                                 else{RESULT= new Integer(((Integer)n).intValue()*((Integer)m).intValue());}
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONMULT",17, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESIONMULT ::= TERMINO 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONMULT",17, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TERMINO ::= OpParenth EXPRESION CloseParenth 
            {
              Object RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object OP = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		int CPleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int CPright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object CP = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TERMINO ::= ID 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 Integer value = (Integer) table.get(d);
            if(value==null){ parser.semanticError(d.toString(),"Null_Exception");
                            value = new Integer (0);}
            RESULT= value;
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TERMINO ::= Num 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= new Integer(d); 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESIONCONDICION ::= EXPRESION 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCONDICION",12, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESIONCONDICION ::= True 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= cond; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCONDICION",12, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESIONCONDICION ::= False 
            {
              Object RESULT =null;
		int cond2left = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object cond2 = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= cond2; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCONDICION",12, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LISTADECLARACIONESCONDICIONADAS ::= DECLARACION 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= d; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTADECLARACIONESCONDICIONADAS",15, ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LISTADECLARACIONESCONDICIONADAS ::= OpKey LISTADECLARACIONES CloseKey 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= list; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("LISTADECLARACIONESCONDICIONADAS",15, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACIONSELECCION ::= Si OpParenth EXPRESIONCONDICION CloseParenth Entonces LISTADECLARACIONESCONDICIONADAS 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-5)).value;
		int LPleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-4)).left;
		int LPright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-4)).right;
		Object LP = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-3)).value;
		int RPleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int RPright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object RP = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object then = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;
		 RESULT= list; 
              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONSELECCION",7, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACIONSELECCION ::= Si OpParenth EXPRESIONCONDICION CloseParenth Entonces LISTADECLARACIONESCONDICIONADAS Sino LISTADECLARACIONESCONDICIONADAS 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-7)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-7)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-7)).value;
		int LPleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-6)).left;
		int LPright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-6)).right;
		Object LP = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-6)).value;
		int RPleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-4)).left;
		int RPright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-4)).right;
		Object RP = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-4)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)).right;
		Object then = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object cond2 = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		int list2left = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int list2right = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object list2 = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONSELECCION",7, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-7)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACIONITERACION ::= Mientras OpParenth EXPRESIONCONDICION CloseParenth Haga LISTADECLARACIONESCONDICIONADAS 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-5)).value;
		int OPleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-4)).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-4)).right;
		Object OP = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-3)).value;
		int CPleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).left;
		int CPright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-2)).right;
		Object CP = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-2)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object cond2 = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.peek()).value;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONITERACION",9, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACIONITERACION ::= Haga LISTADECLARACIONESCONDICIONADAS Mientras OpParenth EXPRESION CloseParenth 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-4)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-4)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-3)).right;
		Object cond2 = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$myParser$stack.elementAt(CUP$myParser$top-1)).value;

              CUP$myParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONITERACION",9, ((java_cup.runtime.Symbol)CUP$myParser$stack.elementAt(CUP$myParser$top-5)), ((java_cup.runtime.Symbol)CUP$myParser$stack.peek()), RESULT);
            }
          return CUP$myParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$myParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$myParser$do_action(
    int                        CUP$myParser$act_num,
    java_cup.runtime.lr_parser CUP$myParser$parser,
    java.util.Stack            CUP$myParser$stack,
    int                        CUP$myParser$top)
    throws java.lang.Exception
    {
              return CUP$myParser$do_action_part00000000(
                               CUP$myParser$act_num,
                               CUP$myParser$parser,
                               CUP$myParser$stack,
                               CUP$myParser$top);
    }
}

}
