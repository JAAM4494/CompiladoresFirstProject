package compiladoresfirstproject;
import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.util.*;
import java.io.*;

                /**** ACTION CODE ****/

action code {:
    Hashtable table = new Hashtable();
    TablaSim tablaSim=new TablaSim();
:}

                /**** PARSER CODE ****/

parser code {:

 public void syntax_error(Symbol cur_token) {
                System.out.println("Error sintáctico: "+ cur_token.value);
}

public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
            System.out.println("Error sintáctico ya no se recupera");
}
 public void semantics_error(String cur_token) {
                System.out.println("Error semantico: La variable  "+ cur_token + "  " +" No se encuentra");
}

:};

                /**** TERMINALES ****/

terminal   True,         False,     Si,        Entonces,   Mientras,    Haga,       Sino;
terminal   Menor,        Mayor,     MenorEq,   MayorEq,    EqEq,        Diferente;
terminal   Hola,         Adios,     Lindos,    Pura,       Vida ;
terminal   Izquierda,    Arriba,    Derecha,   Abajo,      Resta;
terminal   Mover,        Decir,     NewLine,   Suma;
terminal   Declarar,     Eq,        Multi,     Divi;

terminal   OpParenth,    CloseParenth;
terminal   OpKey,        CloseKey; 

terminal   Boca,         Ojos,     Cabeza;

terminal   String Num;
terminal   ID;

                /**** NO TERMINALES ****/

non terminal    PROGRAMA;
non terminal    LISTAVARIABLES,         DECLARACIONVARIABLE;
non terminal    LISTADECLARACIONES,     DECLARACION;
non terminal    MOVER,                  VOZ,                 DECLARACIONSELECCION,       PALABRA;
non terminal    DECLARACIONITERACION,   TIPO;
non terminal    OPERADORSUMA;
non terminal    EXPRESIONCONDICION,     OPERADORMULT;
non terminal    OPERADORRELACIONAL;
non terminal    LISTADECLARACIONESCONDICIONADAS;

non terminal EXPRESIONSUMA, EXPRESIONMULT, TERMINO;
non terminal EXPRESION;

non terminal BOCA,          OJOS,              CABEZA;
non terminal DIRECCIONES,   DIRECCIONBOCA,     DIRECCIONHEAD;

                /**** PRECEDENCIAS ****/

precedence left Sino;
precedence left Suma, Resta;
precedence left Divi, Multi;


                /**** INICIO DE LA GRAMATICA ****/

start with PROGRAMA;

PROGRAMA ::= LISTAVARIABLES LISTADECLARACIONES;

LISTAVARIABLES ::= LISTAVARIABLES DECLARACIONVARIABLE
                 | DECLARACIONVARIABLE:d {:RESULT= d;:};

DECLARACIONVARIABLE ::= Declarar ID:d {:
                        table.put(d.toString(),0);
                        RESULT= d;:};

LISTADECLARACIONES ::=  LISTADECLARACIONES DECLARACION 
                      | DECLARACION:d {:RESULT= d;:};

DECLARACION ::=  MOVER:d {:RESULT= d;:}
               | VOZ:d {:RESULT= d;:}
               | DECLARACIONSELECCION:d {:RESULT= d;:}
               | DECLARACIONITERACION:d {:RESULT= d;:};

MOVER ::=  Mover TIPO:d {:RESULT= d;:};

VOZ ::= Decir PALABRA:d {:RESULT= d;:};

PALABRA ::= Hola:d {:RESULT= d.toString();:}  
          | Adios:d {:RESULT= d.toString();:}  
          | Lindos:d {:RESULT= d.toString();:}  
          | Pura:d {:RESULT= d.toString();:}  	
          | Vida:d {:RESULT= d.toString();:};

TIPO ::= OJOS:d {:RESULT= d.toString();:} 
       | CABEZA:d {:RESULT= d.toString();:}
       | BOCA:d {:RESULT= d.toString();:};

OJOS ::= Ojos DIRECCIONES:d {:RESULT= d.toString();:};

CABEZA ::= Cabeza DIRECCIONHEAD:d {:RESULT= d.toString();:};

BOCA ::= Boca DIRECCIONBOCA:d {:RESULT= d.toString();:};

DIRECCIONES ::= Izquierda:d {:RESULT= d.toString();:}  
       | Arriba:d {:RESULT= d.toString();:}  
       | Derecha:d {:RESULT= d.toString();:}  
       | Abajo:d {:RESULT= d.toString();:};

DIRECCIONHEAD ::= Izquierda:d {:RESULT= d.toString();:} 
                | Derecha:d {:RESULT= d.toString();:};

DIRECCIONBOCA ::= Arriba:d {:RESULT= d.toString();:}
                | Abajo:d {:RESULT= d.toString();:};

OPERADORSUMA ::= Suma:d {:RESULT= d.toString();:}
               | Resta:d {:RESULT= d.toString();:};

OPERADORMULT ::= Multi:d {:RESULT= d.toString();:}
               | Divi:d {:RESULT= d.toString();:};

EXPRESION ::= ID:id Eq EXPRESIONSUMA:expr {:
                                            if(table.containsKey(id.toString())){
                                               table.replace(id.toString(), new Integer(((Integer)expr).intValue()));
                                               tablaSim.writeSymbol(id.toString(), new Integer(((Integer)expr).intValue()));
                                            }
                                           else{
                                            System.out.println("Variable no declarada");
                                            }                     
                                           :}  
            | EXPRESIONSUMA OPERADORRELACIONAL EXPRESIONSUMA
            | EXPRESIONSUMA:d {:RESULT= d;:};

OPERADORRELACIONAL ::= Menor:d {:RESULT= d.toString();:}  
                    |  Mayor:d {:RESULT= d.toString();:}
                    |  MenorEq:d {:RESULT= d.toString();:}
                    |  MayorEq:d {:RESULT= d.toString();:}
                    |  EqEq:d {:RESULT= d.toString();:}
                    |  Diferente:d {:RESULT= d.toString();:};

EXPRESIONSUMA ::= EXPRESIONSUMA:n OPERADORSUMA:d TERMINO:m {:if("+".equals(d.toString())){RESULT= new Integer(((Integer)n).intValue()+((Integer)m).intValue());}
                                                             else{RESULT= new Integer(((Integer)n).intValue()- ((Integer)m).intValue());}:} 
 		| EXPRESIONMULT:d {:RESULT= d;:};

EXPRESIONMULT ::= EXPRESIONMULT:n OPERADORMULT:d EXPRESIONSUMA:m {:if("/".equals(d.toString())){
                                                                 if((Integer)m==0){System.out.println("division entre cero");RESULT= new Integer(0);}
                                                                 else{RESULT=new Integer(((Integer)n).intValue()/((Integer)m).intValue());}}
                                                                 else{RESULT= new Integer(((Integer)n).intValue()*((Integer)m).intValue());}:}
                | TERMINO:d {:RESULT= d;:};

TERMINO ::=  OpParenth EXPRESION:d CloseParenth {:RESULT= d;:}
          | ID:d {:Integer value = (Integer) table.get(d);
            if(value==null){parser.semantics_error(d.toString());
                            value = new Integer (0);}
            RESULT= value;:}
          | Num:d {:RESULT= new Integer(d);:};

EXPRESIONCONDICION ::= EXPRESION:d {:RESULT= d;:}
                     | True:d {:RESULT= d;:}
                     | False:d {:RESULT= d;:};

LISTADECLARACIONESCONDICIONADAS ::= DECLARACION:d {:RESULT= d;:}
                                  | OpKey LISTADECLARACIONES:d CloseKey {:RESULT= d;:};

DECLARACIONSELECCION ::= Si OpParenth EXPRESIONCONDICION CloseParenth Entonces LISTADECLARACIONESCONDICIONADAS
                       | Si OpParenth EXPRESIONCONDICION CloseParenth Entonces LISTADECLARACIONESCONDICIONADAS Sino LISTADECLARACIONESCONDICIONADAS;

DECLARACIONITERACION ::=  Mientras OpParenth EXPRESIONCONDICION CloseParenth Haga LISTADECLARACIONESCONDICIONADAS 
 			| Haga LISTADECLARACIONESCONDICIONADAS Mientras EXPRESION;

                                /**** FIN DE LA GRAMATICA ****/