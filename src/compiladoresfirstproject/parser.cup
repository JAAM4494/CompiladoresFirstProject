package compiladoresfirstproject;

import java.io.*;
import java.lang.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;



action code{:


:}

parser code {:

public void syntax_error(Symbol cur_token){
System.out.println("va a ingresar el error sintactico "+ cur_token.value);
interfaz.rotular  ("va a ingresar el error sintactico "+ cur_token.value);
}

public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
interfaz.rotular("error YA no se recupera");

System.out.println("error YA no se recupera");


:}













/////////////////////////////////////////////////
////// SIMBOLOS TERMINALES /////////////
/////////////////////////////////////////////////

terminal izquierda, arriba, derecha,  abajo;
terminal mover, decir, NEWLINE;
terminal MENOR,  MAYOR,  MENOR_IGUAL, MAYOR_IGUAL, IGUAL_IGUAL, DIFERENTE;
terminal SUMA, RESTA, MULTI, DIV;
terminal True, False, si, entonces, mientras, haga, sino;
terminal hola, adios, lindos, boca, ojos;



/////////////////////////////////////////////////////////////
/////////////////// SIMBOLOS NO TERMINALES ///////////////////
/////////////////////////////////////////////////////////////


non terminal Programa, PALABRA;
non terminal ListaVariables, DeclaracionVariable;
non terminal ListaDeclaraciones, Declaración, declarar;
non terminal Mover, Voz, DeclaracionSeleccion;
non terminal DeclaracionIteracion, TIPO;
non terminal Expresion, ExpresionSuma, Termino;
non terminal OperadorSuma, ExpresionMult, ID;
non terminal OperadorMult, ExpresiónCondición;
non terminal ListaDeclaracionesCondicionadas; 
non terminal OperadorRelacional, NUM;



start with Programa;


/***********inicio de la gramática *******************
******************************************************/

Programa ::= ListaVariables ListaDeclaraciones;

ListaVariables ::= ListaVariables DeclaracionVariable 
     | DeclaracionVariable 
 		    ;

 


DeclaracionVariable ::= declarar ID NEWLINE
			;

ListaDeclaraciones ::=  ListaDeclaraciones Declaración 
| Declaración 
;

Declaracion ::=  Mover 
| Voz
| DeclaracionSeleccion
| DeclaracionIteracion
;

Mover ::=  mover TIPO NEWLINE;

Voz ::= decir PALABRA;

PALABRA ::= hola
		| adios
		| lindos
		| ojos	
		| boca
		;

TIPO ::= izquierda 
| arriba 
| derecha
| abajo
;

Expresion ::= ID = ExpresionSuma 
          | ExpresionSuma
          ;

Expresion ::= ExpresionSuma OperadorRelacional ExpresionSuma 
          | ExpresionSuma
          ;

OperadorRelacional ::= MENOR  
|  MAYOR 
|  MENOR_IGUAL
| MAYOR_IGUAL
|  IGUAL_IGUAL
|  DIFERENTE
;



ExpresionSuma ::= ExpresionSuma OperadorSuma Termino 
 		       | ExpresionMult
		       ;

ExpresionMult ::= ExpresionMult OperadorMult ExpresionSuma 
| Termino
;

OperadorSuma ::=  SUMA
       | RESTA
       ;

OperadorMult ::=  MULTI
    | DIV
    ;

Termino ::= ( Expresion )
        | ID 
        | NUM
        ;

         

ExpresiónCondición ::= Expresion 
| True
| False
;

ListaDeclaracionesCondicionadas ::= Declaración 
| { ListaDeclaraciones }
;


DeclaracionSeleccion ::= si (ExpresiónCondición) entonces ListaDeclaracionesCondicionadas
                                       | si (ExpresiónCondición) entonces ListaDeclaracionesCondicionadas                         sino  ListaDeclaracionesCondicionadas
                                     ;


DeclaracionIteracion ::=  mientras ( ExpresiónCondición ) haga ListaDeclaracionesCondicionadas 
 			| haga ListaDeclaracionesCondicionadas mientras Expresion
			;

