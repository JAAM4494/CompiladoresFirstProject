package compiladoresfirstproject;
import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.util.*;
import java.io.*;

                /**** ACTION CODE ****/

action code {:
    Hashtable table = new Hashtable();
:}

                /**** PARSER CODE ****/

parser code {:

 public void syntax_error(Symbol cur_token) {
                System.out.println("Error sintáctico: "+ cur_token.value);
}

public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
            System.out.println("Error sintáctico ya no se recupera");
}
 public void semantics_error(Symbol cur_token) {
                System.out.println("Error semantico: La variable  "+ cur_token.value + "  " +" No se encuentra");
}

:};

                /**** TERMINALES ****/

terminal   menor,        mayor,     menoreq,   mayoreq,    eqeq,     diferente;
terminal   True,         False,     si,        entonces,   mientras, haga, sino;
terminal   hola,         adios,     lindos,    boca,       ojos;
terminal   izquierda,    arriba,    derecha,   abajo,      resta;
terminal   mover,        decir,     newline,   suma;
terminal   declarar,     eq,        multi,     divi;

terminal Integer num;

terminal   opParth,      closeParth;
terminal   opKey,        closeKey; 

                /**** NO TERMINALES ****/

non terminal    PROGRAMA;
non terminal    LISTAVARIABLES,         DECLARACIONVARIABLE;
non terminal    LISTADECLARACIONES,     DECLARACION;
non terminal    MOVER,                  VOZ,                 DECLARACIONSELECCION,       PALABRA;
non terminal    DECLARACIONITERACION,   TIPO;
non terminal    EXPRESION,              EXPRESIONSUMA,       TERMINO;
non terminal    OPERADORSUMA,           EXPRESIONMULT,       ID;
non terminal    EXPRESIONCONDICION,     OPERADORMULT;
non terminal    OPERADORRELACIONAL;
non terminal    LISTADECLARACIONESCONDICIONADAS;


                /**** PRECEDENCIAS ****/

precedence left sino;
precedence left suma, resta;
precedence left divi, multi;


                /**** INICIO DE LA GRAMATICA ****/

start with PROGRAMA;

PROGRAMA ::= LISTAVARIABLES LISTADECLARACIONES;

LISTAVARIABLES ::= LISTAVARIABLES DECLARACIONVARIABLE
                 | DECLARACIONVARIABLE:d {:RESULT= d;:};

DECLARACIONVARIABLE ::= declarar ID:d newline {:RESULT= d;:};

LISTADECLARACIONES ::=  LISTADECLARACIONES DECLARACION 
                      | DECLARACION:d {:RESULT= d;:};

DECLARACION ::=  MOVER:d {:RESULT= d;:}
               | VOZ:d {:RESULT= d;:}
               | DECLARACIONSELECCION:d {:RESULT= d;:}
               | DECLARACIONITERACION:d {:RESULT= d;:};

MOVER ::=  mover TIPO:d newline {:RESULT= d;:};

VOZ ::= decir PALABRA:d {:RESULT= d;:};

PALABRA ::= hola:d {:RESULT= d.toString();:}  
          | adios:d {:RESULT= d.toString();:}  
          | lindos:d {:RESULT= d.toString();:}  
          | ojos:d {:RESULT= d.toString();:}  	
          | boca:d {:RESULT= d.toString();:};

TIPO ::= izquierda:d {:RESULT= d.toString();:}  
       | arriba:d {:RESULT= d.toString();:}  
       | derecha:d {:RESULT= d.toString();:}  
       | abajo:d {:RESULT= d.toString();:};

OPERADORSUMA ::= suma:d {:RESULT= d.toString();:}
               | resta:d {:RESULT= d.toString();:};

OPERADORMULT ::= multi:d {:RESULT= d.toString();:}
               | divi:d {:RESULT= d.toString();:};

EXPRESION ::= ID:id eq EXPRESIONSUMA:expr {:table.put(id, expr);:}  
            | EXPRESIONSUMA OPERADORRELACIONAL EXPRESIONSUMA
            | EXPRESIONSUMA:d {:RESULT= d;:};

OPERADORRELACIONAL ::= menor:d {:RESULT= d.toString();:}  
                    |  mayor:d {:RESULT= d.toString();:}
                    |  menoreq:d {:RESULT= d.toString();:}
                    |  mayoreq:d {:RESULT= d.toString();:}
                    |  eqeq:d {:RESULT= d.toString();:}
                    |  diferente:d {:RESULT= d.toString();:};

EXPRESIONSUMA ::= EXPRESIONSUMA:n OPERADORSUMA:d TERMINO:m {:if(d.toString()=="+"){RESULT= new Integer(n.intValue()+m.intValue());}
                                                             else{RESULT= new Integer(n.intValue()+m.intValue());}:} 
 		| EXPRESIONMULT:d {:RESULT= d;:};

EXPRESIONMULT ::= EXPRESIONMULT:n OPERADORMULT:d EXPRESIONSUMA:m {:if(d.toString()=="/"){
                                                                 if(m==0){System.out.println("division entre cero")RESULT= new Integer(0);}
                                                                 else{RESULT=new Integer(n.intValue()/m.intValue()}}
                                                                 else{RESULT= new Integer(n.intValue()*m.intValue());}:}
                | TERMINO:d {:RESULT= d;:};

TERMINO ::=  opParth EXPRESION:d closeParth {:RESULT= d;:}
          | ID:d {:Integer value = (Integer) table.get(d);
            if(value==null){parser.semantics_error(d);
                            value = new Integer (0);}
            RESULT= value;:}
          | num:d {:RESULT= new Integer(d);:};

EXPRESIONCONDICION ::= EXPRESION:d {:RESULT= d;:}
                     | True:d {:RESULT= d;:}
                     | False:d {:RESULT= d;:};

LISTADECLARACIONESCONDICIONADAS ::= DECLARACION:d {:RESULT= d;:}
                                  | opKey LISTADECLARACIONES:d closeKey {:RESULT= d;:};


DECLARACIONSELECCION ::= si opParth EXPRESIONCONDICION closeParth entonces LISTADECLARACIONESCONDICIONADAS
                       | si opParth EXPRESIONCONDICION closeParth entonces LISTADECLARACIONESCONDICIONADAS sino LISTADECLARACIONESCONDICIONADAS;


DECLARACIONITERACION ::=  mientras opParth EXPRESIONCONDICION closeParth haga LISTADECLARACIONESCONDICIONADAS 
 			| haga LISTADECLARACIONESCONDICIONADAS mientras EXPRESION;

                                /**** FIN DE LA GRAMATICA ****/